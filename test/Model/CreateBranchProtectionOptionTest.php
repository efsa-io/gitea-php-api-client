<?php
/**
 * CreateBranchProtectionOptionTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  \Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace \Efsa\Client\Gitea\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * CreateBranchProtectionOptionTest Class Doc Comment
 *
 * @category    Class
 * @description CreateBranchProtectionOption options for creating a branch protection
 * @package     \Efsa\Client\Gitea
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class CreateBranchProtectionOptionTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "CreateBranchProtectionOption"
     */
    public function testCreateBranchProtectionOption()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "approvals_whitelist_teams"
     */
    public function testPropertyApprovalsWhitelistTeams()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "approvals_whitelist_username"
     */
    public function testPropertyApprovalsWhitelistUsername()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "block_on_official_review_requests"
     */
    public function testPropertyBlockOnOfficialReviewRequests()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "block_on_outdated_branch"
     */
    public function testPropertyBlockOnOutdatedBranch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "block_on_rejected_reviews"
     */
    public function testPropertyBlockOnRejectedReviews()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "branch_name"
     */
    public function testPropertyBranchName()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "dismiss_stale_approvals"
     */
    public function testPropertyDismissStaleApprovals()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_approvals_whitelist"
     */
    public function testPropertyEnableApprovalsWhitelist()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_merge_whitelist"
     */
    public function testPropertyEnableMergeWhitelist()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_push"
     */
    public function testPropertyEnablePush()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_push_whitelist"
     */
    public function testPropertyEnablePushWhitelist()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_status_check"
     */
    public function testPropertyEnableStatusCheck()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "merge_whitelist_teams"
     */
    public function testPropertyMergeWhitelistTeams()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "merge_whitelist_usernames"
     */
    public function testPropertyMergeWhitelistUsernames()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "protected_file_patterns"
     */
    public function testPropertyProtectedFilePatterns()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "push_whitelist_deploy_keys"
     */
    public function testPropertyPushWhitelistDeployKeys()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "push_whitelist_teams"
     */
    public function testPropertyPushWhitelistTeams()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "push_whitelist_usernames"
     */
    public function testPropertyPushWhitelistUsernames()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "require_signed_commits"
     */
    public function testPropertyRequireSignedCommits()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "required_approvals"
     */
    public function testPropertyRequiredApprovals()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "status_check_contexts"
     */
    public function testPropertyStatusCheckContexts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "unprotected_file_patterns"
     */
    public function testPropertyUnprotectedFilePatterns()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
