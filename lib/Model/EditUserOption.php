<?php
/**
 * EditUserOption
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Gitea\Model;

use \ArrayAccess;
use \Efsa\Client\Gitea\ObjectSerializer;

/**
 * EditUserOption Class Doc Comment
 *
 * @category Class
 * @description EditUserOption edit user options
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EditUserOption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EditUserOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'admin' => 'bool',
        'allowCreateOrganization' => 'bool',
        'allowGitHook' => 'bool',
        'allowImportLocal' => 'bool',
        'description' => 'string',
        'email' => 'string',
        'fullName' => 'string',
        'location' => 'string',
        'loginName' => 'string',
        'maxRepoCreation' => 'int',
        'mustChangePassword' => 'bool',
        'password' => 'string',
        'prohibitLogin' => 'bool',
        'restricted' => 'bool',
        'sourceId' => 'int',
        'visibility' => 'string',
        'website' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'admin' => null,
        'allowCreateOrganization' => null,
        'allowGitHook' => null,
        'allowImportLocal' => null,
        'description' => null,
        'email' => 'email',
        'fullName' => null,
        'location' => null,
        'loginName' => null,
        'maxRepoCreation' => 'int64',
        'mustChangePassword' => null,
        'password' => null,
        'prohibitLogin' => null,
        'restricted' => null,
        'sourceId' => 'int64',
        'visibility' => null,
        'website' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'admin' => 'admin',
        'allowCreateOrganization' => 'allow_create_organization',
        'allowGitHook' => 'allow_git_hook',
        'allowImportLocal' => 'allow_import_local',
        'description' => 'description',
        'email' => 'email',
        'fullName' => 'full_name',
        'location' => 'location',
        'loginName' => 'login_name',
        'maxRepoCreation' => 'max_repo_creation',
        'mustChangePassword' => 'must_change_password',
        'password' => 'password',
        'prohibitLogin' => 'prohibit_login',
        'restricted' => 'restricted',
        'sourceId' => 'source_id',
        'visibility' => 'visibility',
        'website' => 'website'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'admin' => 'setAdmin',
        'allowCreateOrganization' => 'setAllowCreateOrganization',
        'allowGitHook' => 'setAllowGitHook',
        'allowImportLocal' => 'setAllowImportLocal',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'fullName' => 'setFullName',
        'location' => 'setLocation',
        'loginName' => 'setLoginName',
        'maxRepoCreation' => 'setMaxRepoCreation',
        'mustChangePassword' => 'setMustChangePassword',
        'password' => 'setPassword',
        'prohibitLogin' => 'setProhibitLogin',
        'restricted' => 'setRestricted',
        'sourceId' => 'setSourceId',
        'visibility' => 'setVisibility',
        'website' => 'setWebsite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'admin' => 'getAdmin',
        'allowCreateOrganization' => 'getAllowCreateOrganization',
        'allowGitHook' => 'getAllowGitHook',
        'allowImportLocal' => 'getAllowImportLocal',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'fullName' => 'getFullName',
        'location' => 'getLocation',
        'loginName' => 'getLoginName',
        'maxRepoCreation' => 'getMaxRepoCreation',
        'mustChangePassword' => 'getMustChangePassword',
        'password' => 'getPassword',
        'prohibitLogin' => 'getProhibitLogin',
        'restricted' => 'getRestricted',
        'sourceId' => 'getSourceId',
        'visibility' => 'getVisibility',
        'website' => 'getWebsite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = $data['active'] ?? null;
        $this->container['admin'] = $data['admin'] ?? null;
        $this->container['allowCreateOrganization'] = $data['allowCreateOrganization'] ?? null;
        $this->container['allowGitHook'] = $data['allowGitHook'] ?? null;
        $this->container['allowImportLocal'] = $data['allowImportLocal'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['fullName'] = $data['fullName'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['loginName'] = $data['loginName'] ?? null;
        $this->container['maxRepoCreation'] = $data['maxRepoCreation'] ?? null;
        $this->container['mustChangePassword'] = $data['mustChangePassword'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['prohibitLogin'] = $data['prohibitLogin'] ?? null;
        $this->container['restricted'] = $data['restricted'] ?? null;
        $this->container['sourceId'] = $data['sourceId'] ?? null;
        $this->container['visibility'] = $data['visibility'] ?? null;
        $this->container['website'] = $data['website'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['loginName'] === null) {
            $invalidProperties[] = "'loginName' can't be null";
        }
        if ($this->container['sourceId'] === null) {
            $invalidProperties[] = "'sourceId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets admin
     *
     * @return bool|null
     */
    public function getAdmin()
    {
        return $this->container['admin'];
    }

    /**
     * Sets admin
     *
     * @param bool|null $admin admin
     *
     * @return self
     */
    public function setAdmin($admin)
    {
        $this->container['admin'] = $admin;

        return $this;
    }

    /**
     * Gets allowCreateOrganization
     *
     * @return bool|null
     */
    public function getAllowCreateOrganization()
    {
        return $this->container['allowCreateOrganization'];
    }

    /**
     * Sets allowCreateOrganization
     *
     * @param bool|null $allowCreateOrganization allowCreateOrganization
     *
     * @return self
     */
    public function setAllowCreateOrganization($allowCreateOrganization)
    {
        $this->container['allowCreateOrganization'] = $allowCreateOrganization;

        return $this;
    }

    /**
     * Gets allowGitHook
     *
     * @return bool|null
     */
    public function getAllowGitHook()
    {
        return $this->container['allowGitHook'];
    }

    /**
     * Sets allowGitHook
     *
     * @param bool|null $allowGitHook allowGitHook
     *
     * @return self
     */
    public function setAllowGitHook($allowGitHook)
    {
        $this->container['allowGitHook'] = $allowGitHook;

        return $this;
    }

    /**
     * Gets allowImportLocal
     *
     * @return bool|null
     */
    public function getAllowImportLocal()
    {
        return $this->container['allowImportLocal'];
    }

    /**
     * Sets allowImportLocal
     *
     * @param bool|null $allowImportLocal allowImportLocal
     *
     * @return self
     */
    public function setAllowImportLocal($allowImportLocal)
    {
        $this->container['allowImportLocal'] = $allowImportLocal;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fullName
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['fullName'];
    }

    /**
     * Sets fullName
     *
     * @param string|null $fullName fullName
     *
     * @return self
     */
    public function setFullName($fullName)
    {
        $this->container['fullName'] = $fullName;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets loginName
     *
     * @return string
     */
    public function getLoginName()
    {
        return $this->container['loginName'];
    }

    /**
     * Sets loginName
     *
     * @param string $loginName loginName
     *
     * @return self
     */
    public function setLoginName($loginName)
    {
        $this->container['loginName'] = $loginName;

        return $this;
    }

    /**
     * Gets maxRepoCreation
     *
     * @return int|null
     */
    public function getMaxRepoCreation()
    {
        return $this->container['maxRepoCreation'];
    }

    /**
     * Sets maxRepoCreation
     *
     * @param int|null $maxRepoCreation maxRepoCreation
     *
     * @return self
     */
    public function setMaxRepoCreation($maxRepoCreation)
    {
        $this->container['maxRepoCreation'] = $maxRepoCreation;

        return $this;
    }

    /**
     * Gets mustChangePassword
     *
     * @return bool|null
     */
    public function getMustChangePassword()
    {
        return $this->container['mustChangePassword'];
    }

    /**
     * Sets mustChangePassword
     *
     * @param bool|null $mustChangePassword mustChangePassword
     *
     * @return self
     */
    public function setMustChangePassword($mustChangePassword)
    {
        $this->container['mustChangePassword'] = $mustChangePassword;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets prohibitLogin
     *
     * @return bool|null
     */
    public function getProhibitLogin()
    {
        return $this->container['prohibitLogin'];
    }

    /**
     * Sets prohibitLogin
     *
     * @param bool|null $prohibitLogin prohibitLogin
     *
     * @return self
     */
    public function setProhibitLogin($prohibitLogin)
    {
        $this->container['prohibitLogin'] = $prohibitLogin;

        return $this;
    }

    /**
     * Gets restricted
     *
     * @return bool|null
     */
    public function getRestricted()
    {
        return $this->container['restricted'];
    }

    /**
     * Sets restricted
     *
     * @param bool|null $restricted restricted
     *
     * @return self
     */
    public function setRestricted($restricted)
    {
        $this->container['restricted'] = $restricted;

        return $this;
    }

    /**
     * Gets sourceId
     *
     * @return int
     */
    public function getSourceId()
    {
        return $this->container['sourceId'];
    }

    /**
     * Sets sourceId
     *
     * @param int $sourceId sourceId
     *
     * @return self
     */
    public function setSourceId($sourceId)
    {
        $this->container['sourceId'] = $sourceId;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string|null $visibility visibility
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


