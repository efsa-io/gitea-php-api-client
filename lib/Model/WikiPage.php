<?php
/**
 * WikiPage
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Gitea\Model;

use \ArrayAccess;
use \Efsa\Client\Gitea\ObjectSerializer;

/**
 * WikiPage Class Doc Comment
 *
 * @category Class
 * @description WikiPage a wiki page
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class WikiPage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WikiPage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'commit_count' => 'int',
        'content_base64' => 'string',
        'footer' => 'string',
        'html_url' => 'string',
        'last_commit' => '\Efsa\Client\Gitea\Model\WikiCommit',
        'sidebar' => 'string',
        'sub_url' => 'string',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'commit_count' => 'int64',
        'content_base64' => null,
        'footer' => null,
        'html_url' => null,
        'last_commit' => null,
        'sidebar' => null,
        'sub_url' => null,
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'commit_count' => 'commit_count',
        'content_base64' => 'content_base64',
        'footer' => 'footer',
        'html_url' => 'html_url',
        'last_commit' => 'last_commit',
        'sidebar' => 'sidebar',
        'sub_url' => 'sub_url',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'commit_count' => 'setCommitCount',
        'content_base64' => 'setContentBase64',
        'footer' => 'setFooter',
        'html_url' => 'setHtmlUrl',
        'last_commit' => 'setLastCommit',
        'sidebar' => 'setSidebar',
        'sub_url' => 'setSubUrl',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'commit_count' => 'getCommitCount',
        'content_base64' => 'getContentBase64',
        'footer' => 'getFooter',
        'html_url' => 'getHtmlUrl',
        'last_commit' => 'getLastCommit',
        'sidebar' => 'getSidebar',
        'sub_url' => 'getSubUrl',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['commit_count'] = $data['commit_count'] ?? null;
        $this->container['content_base64'] = $data['content_base64'] ?? null;
        $this->container['footer'] = $data['footer'] ?? null;
        $this->container['html_url'] = $data['html_url'] ?? null;
        $this->container['last_commit'] = $data['last_commit'] ?? null;
        $this->container['sidebar'] = $data['sidebar'] ?? null;
        $this->container['sub_url'] = $data['sub_url'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets commit_count
     *
     * @return int|null
     */
    public function getCommitCount()
    {
        return $this->container['commit_count'];
    }

    /**
     * Sets commit_count
     *
     * @param int|null $commit_count commit_count
     *
     * @return self
     */
    public function setCommitCount($commit_count)
    {
        $this->container['commit_count'] = $commit_count;

        return $this;
    }

    /**
     * Gets content_base64
     *
     * @return string|null
     */
    public function getContentBase64()
    {
        return $this->container['content_base64'];
    }

    /**
     * Sets content_base64
     *
     * @param string|null $content_base64 Page content, base64 encoded
     *
     * @return self
     */
    public function setContentBase64($content_base64)
    {
        $this->container['content_base64'] = $content_base64;

        return $this;
    }

    /**
     * Gets footer
     *
     * @return string|null
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     *
     * @param string|null $footer footer
     *
     * @return self
     */
    public function setFooter($footer)
    {
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string|null
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string|null $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets last_commit
     *
     * @return \Efsa\Client\Gitea\Model\WikiCommit|null
     */
    public function getLastCommit()
    {
        return $this->container['last_commit'];
    }

    /**
     * Sets last_commit
     *
     * @param \Efsa\Client\Gitea\Model\WikiCommit|null $last_commit last_commit
     *
     * @return self
     */
    public function setLastCommit($last_commit)
    {
        $this->container['last_commit'] = $last_commit;

        return $this;
    }

    /**
     * Gets sidebar
     *
     * @return string|null
     */
    public function getSidebar()
    {
        return $this->container['sidebar'];
    }

    /**
     * Sets sidebar
     *
     * @param string|null $sidebar sidebar
     *
     * @return self
     */
    public function setSidebar($sidebar)
    {
        $this->container['sidebar'] = $sidebar;

        return $this;
    }

    /**
     * Gets sub_url
     *
     * @return string|null
     */
    public function getSubUrl()
    {
        return $this->container['sub_url'];
    }

    /**
     * Sets sub_url
     *
     * @param string|null $sub_url sub_url
     *
     * @return self
     */
    public function setSubUrl($sub_url)
    {
        $this->container['sub_url'] = $sub_url;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


