<?php
/**
 * CreateRepoOption
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Gitea\Model;

use \ArrayAccess;
use \Efsa\Client\Gitea\ObjectSerializer;

/**
 * CreateRepoOption Class Doc Comment
 *
 * @category Class
 * @description CreateRepoOption options when creating repository
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CreateRepoOption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateRepoOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'autoInit' => 'bool',
        'defaultBranch' => 'string',
        'description' => 'string',
        'gitignores' => 'string',
        'issueLabels' => 'string',
        'license' => 'string',
        'name' => 'string',
        'private' => 'bool',
        'readme' => 'string',
        'template' => 'bool',
        'trustModel' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'autoInit' => null,
        'defaultBranch' => null,
        'description' => null,
        'gitignores' => null,
        'issueLabels' => null,
        'license' => null,
        'name' => null,
        'private' => null,
        'readme' => null,
        'template' => null,
        'trustModel' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'autoInit' => 'auto_init',
        'defaultBranch' => 'default_branch',
        'description' => 'description',
        'gitignores' => 'gitignores',
        'issueLabels' => 'issue_labels',
        'license' => 'license',
        'name' => 'name',
        'private' => 'private',
        'readme' => 'readme',
        'template' => 'template',
        'trustModel' => 'trust_model'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'autoInit' => 'setAutoInit',
        'defaultBranch' => 'setDefaultBranch',
        'description' => 'setDescription',
        'gitignores' => 'setGitignores',
        'issueLabels' => 'setIssueLabels',
        'license' => 'setLicense',
        'name' => 'setName',
        'private' => 'setPrivate',
        'readme' => 'setReadme',
        'template' => 'setTemplate',
        'trustModel' => 'setTrustModel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'autoInit' => 'getAutoInit',
        'defaultBranch' => 'getDefaultBranch',
        'description' => 'getDescription',
        'gitignores' => 'getGitignores',
        'issueLabels' => 'getIssueLabels',
        'license' => 'getLicense',
        'name' => 'getName',
        'private' => 'getPrivate',
        'readme' => 'getReadme',
        'template' => 'getTemplate',
        'trustModel' => 'getTrustModel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TRUST_MODEL__DEFAULT = 'default';
    const TRUST_MODEL_COLLABORATOR = 'collaborator';
    const TRUST_MODEL_COMMITTER = 'committer';
    const TRUST_MODEL_COLLABORATORCOMMITTER = 'collaboratorcommitter';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrustModelAllowableValues()
    {
        return [
            self::TRUST_MODEL__DEFAULT,
            self::TRUST_MODEL_COLLABORATOR,
            self::TRUST_MODEL_COMMITTER,
            self::TRUST_MODEL_COLLABORATORCOMMITTER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['autoInit'] = $data['autoInit'] ?? null;
        $this->container['defaultBranch'] = $data['defaultBranch'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['gitignores'] = $data['gitignores'] ?? null;
        $this->container['issueLabels'] = $data['issueLabels'] ?? null;
        $this->container['license'] = $data['license'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['private'] = $data['private'] ?? null;
        $this->container['readme'] = $data['readme'] ?? null;
        $this->container['template'] = $data['template'] ?? null;
        $this->container['trustModel'] = $data['trustModel'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getTrustModelAllowableValues();
        if (!is_null($this->container['trustModel']) && !in_array($this->container['trustModel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trustModel', must be one of '%s'",
                $this->container['trustModel'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets autoInit
     *
     * @return bool|null
     */
    public function getAutoInit()
    {
        return $this->container['autoInit'];
    }

    /**
     * Sets autoInit
     *
     * @param bool|null $autoInit Whether the repository should be auto-initialized?
     *
     * @return self
     */
    public function setAutoInit($autoInit)
    {
        $this->container['autoInit'] = $autoInit;

        return $this;
    }

    /**
     * Gets defaultBranch
     *
     * @return string|null
     */
    public function getDefaultBranch()
    {
        return $this->container['defaultBranch'];
    }

    /**
     * Sets defaultBranch
     *
     * @param string|null $defaultBranch DefaultBranch of the repository (used when initializes and in template)
     *
     * @return self
     */
    public function setDefaultBranch($defaultBranch)
    {
        $this->container['defaultBranch'] = $defaultBranch;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the repository to create
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets gitignores
     *
     * @return string|null
     */
    public function getGitignores()
    {
        return $this->container['gitignores'];
    }

    /**
     * Sets gitignores
     *
     * @param string|null $gitignores Gitignores to use
     *
     * @return self
     */
    public function setGitignores($gitignores)
    {
        $this->container['gitignores'] = $gitignores;

        return $this;
    }

    /**
     * Gets issueLabels
     *
     * @return string|null
     */
    public function getIssueLabels()
    {
        return $this->container['issueLabels'];
    }

    /**
     * Sets issueLabels
     *
     * @param string|null $issueLabels Label-Set to use
     *
     * @return self
     */
    public function setIssueLabels($issueLabels)
    {
        $this->container['issueLabels'] = $issueLabels;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string|null
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string|null $license License to use
     *
     * @return self
     */
    public function setLicense($license)
    {
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the repository to create
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool|null
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool|null $private Whether the repository is private
     *
     * @return self
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets readme
     *
     * @return string|null
     */
    public function getReadme()
    {
        return $this->container['readme'];
    }

    /**
     * Sets readme
     *
     * @param string|null $readme Readme of the repository to create
     *
     * @return self
     */
    public function setReadme($readme)
    {
        $this->container['readme'] = $readme;

        return $this;
    }

    /**
     * Gets template
     *
     * @return bool|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param bool|null $template Whether the repository is template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets trustModel
     *
     * @return string|null
     */
    public function getTrustModel()
    {
        return $this->container['trustModel'];
    }

    /**
     * Sets trustModel
     *
     * @param string|null $trustModel TrustModel of the repository
     *
     * @return self
     */
    public function setTrustModel($trustModel)
    {
        $allowedValues = $this->getTrustModelAllowableValues();
        if (!is_null($trustModel) && !in_array($trustModel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'trustModel', must be one of '%s'",
                    $trustModel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trustModel'] = $trustModel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


