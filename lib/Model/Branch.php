<?php
/**
 * Branch
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Gitea\Model;

use \ArrayAccess;
use \Efsa\Client\Gitea\ObjectSerializer;

/**
 * Branch Class Doc Comment
 *
 * @category Class
 * @description Branch represents a repository branch
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Branch implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Branch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'commit' => '\Efsa\Client\Gitea\Model\PayloadCommit',
        'effectiveBranchProtectionName' => 'string',
        'enableStatusCheck' => 'bool',
        'name' => 'string',
        'protected' => 'bool',
        'requiredApprovals' => 'int',
        'statusCheckContexts' => 'string[]',
        'userCanMerge' => 'bool',
        'userCanPush' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'commit' => null,
        'effectiveBranchProtectionName' => null,
        'enableStatusCheck' => null,
        'name' => null,
        'protected' => null,
        'requiredApprovals' => 'int64',
        'statusCheckContexts' => null,
        'userCanMerge' => null,
        'userCanPush' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'commit' => 'commit',
        'effectiveBranchProtectionName' => 'effective_branch_protection_name',
        'enableStatusCheck' => 'enable_status_check',
        'name' => 'name',
        'protected' => 'protected',
        'requiredApprovals' => 'required_approvals',
        'statusCheckContexts' => 'status_check_contexts',
        'userCanMerge' => 'user_can_merge',
        'userCanPush' => 'user_can_push'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'commit' => 'setCommit',
        'effectiveBranchProtectionName' => 'setEffectiveBranchProtectionName',
        'enableStatusCheck' => 'setEnableStatusCheck',
        'name' => 'setName',
        'protected' => 'setProtected',
        'requiredApprovals' => 'setRequiredApprovals',
        'statusCheckContexts' => 'setStatusCheckContexts',
        'userCanMerge' => 'setUserCanMerge',
        'userCanPush' => 'setUserCanPush'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'commit' => 'getCommit',
        'effectiveBranchProtectionName' => 'getEffectiveBranchProtectionName',
        'enableStatusCheck' => 'getEnableStatusCheck',
        'name' => 'getName',
        'protected' => 'getProtected',
        'requiredApprovals' => 'getRequiredApprovals',
        'statusCheckContexts' => 'getStatusCheckContexts',
        'userCanMerge' => 'getUserCanMerge',
        'userCanPush' => 'getUserCanPush'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['commit'] = $data['commit'] ?? null;
        $this->container['effectiveBranchProtectionName'] = $data['effectiveBranchProtectionName'] ?? null;
        $this->container['enableStatusCheck'] = $data['enableStatusCheck'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['protected'] = $data['protected'] ?? null;
        $this->container['requiredApprovals'] = $data['requiredApprovals'] ?? null;
        $this->container['statusCheckContexts'] = $data['statusCheckContexts'] ?? null;
        $this->container['userCanMerge'] = $data['userCanMerge'] ?? null;
        $this->container['userCanPush'] = $data['userCanPush'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets commit
     *
     * @return \Efsa\Client\Gitea\Model\PayloadCommit|null
     */
    public function getCommit()
    {
        return $this->container['commit'];
    }

    /**
     * Sets commit
     *
     * @param \Efsa\Client\Gitea\Model\PayloadCommit|null $commit commit
     *
     * @return self
     */
    public function setCommit($commit)
    {
        $this->container['commit'] = $commit;

        return $this;
    }

    /**
     * Gets effectiveBranchProtectionName
     *
     * @return string|null
     */
    public function getEffectiveBranchProtectionName()
    {
        return $this->container['effectiveBranchProtectionName'];
    }

    /**
     * Sets effectiveBranchProtectionName
     *
     * @param string|null $effectiveBranchProtectionName effectiveBranchProtectionName
     *
     * @return self
     */
    public function setEffectiveBranchProtectionName($effectiveBranchProtectionName)
    {
        $this->container['effectiveBranchProtectionName'] = $effectiveBranchProtectionName;

        return $this;
    }

    /**
     * Gets enableStatusCheck
     *
     * @return bool|null
     */
    public function getEnableStatusCheck()
    {
        return $this->container['enableStatusCheck'];
    }

    /**
     * Sets enableStatusCheck
     *
     * @param bool|null $enableStatusCheck enableStatusCheck
     *
     * @return self
     */
    public function setEnableStatusCheck($enableStatusCheck)
    {
        $this->container['enableStatusCheck'] = $enableStatusCheck;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets protected
     *
     * @return bool|null
     */
    public function getProtected()
    {
        return $this->container['protected'];
    }

    /**
     * Sets protected
     *
     * @param bool|null $protected protected
     *
     * @return self
     */
    public function setProtected($protected)
    {
        $this->container['protected'] = $protected;

        return $this;
    }

    /**
     * Gets requiredApprovals
     *
     * @return int|null
     */
    public function getRequiredApprovals()
    {
        return $this->container['requiredApprovals'];
    }

    /**
     * Sets requiredApprovals
     *
     * @param int|null $requiredApprovals requiredApprovals
     *
     * @return self
     */
    public function setRequiredApprovals($requiredApprovals)
    {
        $this->container['requiredApprovals'] = $requiredApprovals;

        return $this;
    }

    /**
     * Gets statusCheckContexts
     *
     * @return string[]|null
     */
    public function getStatusCheckContexts()
    {
        return $this->container['statusCheckContexts'];
    }

    /**
     * Sets statusCheckContexts
     *
     * @param string[]|null $statusCheckContexts statusCheckContexts
     *
     * @return self
     */
    public function setStatusCheckContexts($statusCheckContexts)
    {
        $this->container['statusCheckContexts'] = $statusCheckContexts;

        return $this;
    }

    /**
     * Gets userCanMerge
     *
     * @return bool|null
     */
    public function getUserCanMerge()
    {
        return $this->container['userCanMerge'];
    }

    /**
     * Sets userCanMerge
     *
     * @param bool|null $userCanMerge userCanMerge
     *
     * @return self
     */
    public function setUserCanMerge($userCanMerge)
    {
        $this->container['userCanMerge'] = $userCanMerge;

        return $this;
    }

    /**
     * Gets userCanPush
     *
     * @return bool|null
     */
    public function getUserCanPush()
    {
        return $this->container['userCanPush'];
    }

    /**
     * Sets userCanPush
     *
     * @param bool|null $userCanPush userCanPush
     *
     * @return self
     */
    public function setUserCanPush($userCanPush)
    {
        $this->container['userCanPush'] = $userCanPush;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


