<?php
/**
 * PullReviewComment
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Model;

use \ArrayAccess;
use \Efsa\Client\ObjectSerializer;

/**
 * PullReviewComment Class Doc Comment
 *
 * @category Class
 * @description PullReviewComment represents a comment on a pull request review
 * @package  Efsa\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PullReviewComment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PullReviewComment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'body' => 'string',
        'commit_id' => 'string',
        'created_at' => '\DateTime',
        'diff_hunk' => 'string',
        'html_url' => 'string',
        'id' => 'int',
        'original_commit_id' => 'string',
        'original_position' => 'int',
        'path' => 'string',
        'position' => 'int',
        'pull_request_review_id' => 'int',
        'pull_request_url' => 'string',
        'resolver' => '\Efsa\Client\Model\User',
        'updated_at' => '\DateTime',
        'user' => '\Efsa\Client\Model\User'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'body' => null,
        'commit_id' => null,
        'created_at' => 'date-time',
        'diff_hunk' => null,
        'html_url' => null,
        'id' => 'int64',
        'original_commit_id' => null,
        'original_position' => 'uint64',
        'path' => null,
        'position' => 'uint64',
        'pull_request_review_id' => 'int64',
        'pull_request_url' => null,
        'resolver' => null,
        'updated_at' => 'date-time',
        'user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'body' => 'body',
        'commit_id' => 'commit_id',
        'created_at' => 'created_at',
        'diff_hunk' => 'diff_hunk',
        'html_url' => 'html_url',
        'id' => 'id',
        'original_commit_id' => 'original_commit_id',
        'original_position' => 'original_position',
        'path' => 'path',
        'position' => 'position',
        'pull_request_review_id' => 'pull_request_review_id',
        'pull_request_url' => 'pull_request_url',
        'resolver' => 'resolver',
        'updated_at' => 'updated_at',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'body' => 'setBody',
        'commit_id' => 'setCommitId',
        'created_at' => 'setCreatedAt',
        'diff_hunk' => 'setDiffHunk',
        'html_url' => 'setHtmlUrl',
        'id' => 'setId',
        'original_commit_id' => 'setOriginalCommitId',
        'original_position' => 'setOriginalPosition',
        'path' => 'setPath',
        'position' => 'setPosition',
        'pull_request_review_id' => 'setPullRequestReviewId',
        'pull_request_url' => 'setPullRequestUrl',
        'resolver' => 'setResolver',
        'updated_at' => 'setUpdatedAt',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'body' => 'getBody',
        'commit_id' => 'getCommitId',
        'created_at' => 'getCreatedAt',
        'diff_hunk' => 'getDiffHunk',
        'html_url' => 'getHtmlUrl',
        'id' => 'getId',
        'original_commit_id' => 'getOriginalCommitId',
        'original_position' => 'getOriginalPosition',
        'path' => 'getPath',
        'position' => 'getPosition',
        'pull_request_review_id' => 'getPullRequestReviewId',
        'pull_request_url' => 'getPullRequestUrl',
        'resolver' => 'getResolver',
        'updated_at' => 'getUpdatedAt',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['body'] = $data['body'] ?? null;
        $this->container['commit_id'] = $data['commit_id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['diff_hunk'] = $data['diff_hunk'] ?? null;
        $this->container['html_url'] = $data['html_url'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['original_commit_id'] = $data['original_commit_id'] ?? null;
        $this->container['original_position'] = $data['original_position'] ?? null;
        $this->container['path'] = $data['path'] ?? null;
        $this->container['position'] = $data['position'] ?? null;
        $this->container['pull_request_review_id'] = $data['pull_request_review_id'] ?? null;
        $this->container['pull_request_url'] = $data['pull_request_url'] ?? null;
        $this->container['resolver'] = $data['resolver'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets commit_id
     *
     * @return string|null
     */
    public function getCommitId()
    {
        return $this->container['commit_id'];
    }

    /**
     * Sets commit_id
     *
     * @param string|null $commit_id commit_id
     *
     * @return self
     */
    public function setCommitId($commit_id)
    {
        $this->container['commit_id'] = $commit_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets diff_hunk
     *
     * @return string|null
     */
    public function getDiffHunk()
    {
        return $this->container['diff_hunk'];
    }

    /**
     * Sets diff_hunk
     *
     * @param string|null $diff_hunk diff_hunk
     *
     * @return self
     */
    public function setDiffHunk($diff_hunk)
    {
        $this->container['diff_hunk'] = $diff_hunk;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string|null
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string|null $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets original_commit_id
     *
     * @return string|null
     */
    public function getOriginalCommitId()
    {
        return $this->container['original_commit_id'];
    }

    /**
     * Sets original_commit_id
     *
     * @param string|null $original_commit_id original_commit_id
     *
     * @return self
     */
    public function setOriginalCommitId($original_commit_id)
    {
        $this->container['original_commit_id'] = $original_commit_id;

        return $this;
    }

    /**
     * Gets original_position
     *
     * @return int|null
     */
    public function getOriginalPosition()
    {
        return $this->container['original_position'];
    }

    /**
     * Sets original_position
     *
     * @param int|null $original_position original_position
     *
     * @return self
     */
    public function setOriginalPosition($original_position)
    {
        $this->container['original_position'] = $original_position;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position position
     *
     * @return self
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets pull_request_review_id
     *
     * @return int|null
     */
    public function getPullRequestReviewId()
    {
        return $this->container['pull_request_review_id'];
    }

    /**
     * Sets pull_request_review_id
     *
     * @param int|null $pull_request_review_id pull_request_review_id
     *
     * @return self
     */
    public function setPullRequestReviewId($pull_request_review_id)
    {
        $this->container['pull_request_review_id'] = $pull_request_review_id;

        return $this;
    }

    /**
     * Gets pull_request_url
     *
     * @return string|null
     */
    public function getPullRequestUrl()
    {
        return $this->container['pull_request_url'];
    }

    /**
     * Sets pull_request_url
     *
     * @param string|null $pull_request_url pull_request_url
     *
     * @return self
     */
    public function setPullRequestUrl($pull_request_url)
    {
        $this->container['pull_request_url'] = $pull_request_url;

        return $this;
    }

    /**
     * Gets resolver
     *
     * @return \Efsa\Client\Model\User|null
     */
    public function getResolver()
    {
        return $this->container['resolver'];
    }

    /**
     * Sets resolver
     *
     * @param \Efsa\Client\Model\User|null $resolver resolver
     *
     * @return self
     */
    public function setResolver($resolver)
    {
        $this->container['resolver'] = $resolver;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Efsa\Client\Model\User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Efsa\Client\Model\User|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


