<?php
/**
 * Milestone
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Gitea\Model;

use \ArrayAccess;
use \Efsa\Client\Gitea\ObjectSerializer;

/**
 * Milestone Class Doc Comment
 *
 * @category Class
 * @description Milestone milestone is a collection of issues on one repository
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Milestone implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Milestone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'closedAt' => '\DateTime',
        'closedIssues' => 'int',
        'createdAt' => '\DateTime',
        'description' => 'string',
        'dueOn' => '\DateTime',
        'id' => 'int',
        'openIssues' => 'int',
        'state' => 'string',
        'title' => 'string',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'closedAt' => 'date-time',
        'closedIssues' => 'int64',
        'createdAt' => 'date-time',
        'description' => null,
        'dueOn' => 'date-time',
        'id' => 'int64',
        'openIssues' => 'int64',
        'state' => null,
        'title' => null,
        'updatedAt' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'closedAt' => 'closed_at',
        'closedIssues' => 'closed_issues',
        'createdAt' => 'created_at',
        'description' => 'description',
        'dueOn' => 'due_on',
        'id' => 'id',
        'openIssues' => 'open_issues',
        'state' => 'state',
        'title' => 'title',
        'updatedAt' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'closedAt' => 'setClosedAt',
        'closedIssues' => 'setClosedIssues',
        'createdAt' => 'setCreatedAt',
        'description' => 'setDescription',
        'dueOn' => 'setDueOn',
        'id' => 'setId',
        'openIssues' => 'setOpenIssues',
        'state' => 'setState',
        'title' => 'setTitle',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'closedAt' => 'getClosedAt',
        'closedIssues' => 'getClosedIssues',
        'createdAt' => 'getCreatedAt',
        'description' => 'getDescription',
        'dueOn' => 'getDueOn',
        'id' => 'getId',
        'openIssues' => 'getOpenIssues',
        'state' => 'getState',
        'title' => 'getTitle',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['closedAt'] = $data['closedAt'] ?? null;
        $this->container['closedIssues'] = $data['closedIssues'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['dueOn'] = $data['dueOn'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['openIssues'] = $data['openIssues'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['updatedAt'] = $data['updatedAt'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets closedAt
     *
     * @return \DateTime|null
     */
    public function getClosedAt()
    {
        return $this->container['closedAt'];
    }

    /**
     * Sets closedAt
     *
     * @param \DateTime|null $closedAt closedAt
     *
     * @return self
     */
    public function setClosedAt($closedAt)
    {
        $this->container['closedAt'] = $closedAt;

        return $this;
    }

    /**
     * Gets closedIssues
     *
     * @return int|null
     */
    public function getClosedIssues()
    {
        return $this->container['closedIssues'];
    }

    /**
     * Sets closedIssues
     *
     * @param int|null $closedIssues closedIssues
     *
     * @return self
     */
    public function setClosedIssues($closedIssues)
    {
        $this->container['closedIssues'] = $closedIssues;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dueOn
     *
     * @return \DateTime|null
     */
    public function getDueOn()
    {
        return $this->container['dueOn'];
    }

    /**
     * Sets dueOn
     *
     * @param \DateTime|null $dueOn dueOn
     *
     * @return self
     */
    public function setDueOn($dueOn)
    {
        $this->container['dueOn'] = $dueOn;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets openIssues
     *
     * @return int|null
     */
    public function getOpenIssues()
    {
        return $this->container['openIssues'];
    }

    /**
     * Sets openIssues
     *
     * @param int|null $openIssues openIssues
     *
     * @return self
     */
    public function setOpenIssues($openIssues)
    {
        $this->container['openIssues'] = $openIssues;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state StateType issue state type
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


