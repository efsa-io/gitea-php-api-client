<?php
/**
 * Repository
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Model;

use \ArrayAccess;
use \Efsa\Client\ObjectSerializer;

/**
 * Repository Class Doc Comment
 *
 * @category Class
 * @description Repository represents a repository
 * @package  Efsa\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Repository implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Repository';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_merge_commits' => 'bool',
        'allow_rebase' => 'bool',
        'allow_rebase_explicit' => 'bool',
        'allow_squash_merge' => 'bool',
        'archived' => 'bool',
        'avatar_url' => 'string',
        'clone_url' => 'string',
        'created_at' => '\DateTime',
        'default_branch' => 'string',
        'default_merge_style' => 'string',
        'description' => 'string',
        'empty' => 'bool',
        'external_tracker' => '\Efsa\Client\Model\ExternalTracker',
        'external_wiki' => '\Efsa\Client\Model\ExternalWiki',
        'fork' => 'bool',
        'forks_count' => 'int',
        'full_name' => 'string',
        'has_issues' => 'bool',
        'has_projects' => 'bool',
        'has_pull_requests' => 'bool',
        'has_wiki' => 'bool',
        'html_url' => 'string',
        'id' => 'int',
        'ignore_whitespace_conflicts' => 'bool',
        'internal' => 'bool',
        'internal_tracker' => '\Efsa\Client\Model\InternalTracker',
        'language' => 'string',
        'languages_url' => 'string',
        'mirror' => 'bool',
        'mirror_interval' => 'string',
        'mirror_updated' => '\DateTime',
        'name' => 'string',
        'open_issues_count' => 'int',
        'open_pr_counter' => 'int',
        'original_url' => 'string',
        'owner' => '\Efsa\Client\Model\User',
        'parent' => '\Efsa\Client\Model\Repository',
        'permissions' => '\Efsa\Client\Model\Permission',
        'private' => 'bool',
        'release_counter' => 'int',
        'repo_transfer' => '\Efsa\Client\Model\RepoTransfer',
        'size' => 'int',
        'ssh_url' => 'string',
        'stars_count' => 'int',
        'template' => 'bool',
        'updated_at' => '\DateTime',
        'watchers_count' => 'int',
        'website' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_merge_commits' => null,
        'allow_rebase' => null,
        'allow_rebase_explicit' => null,
        'allow_squash_merge' => null,
        'archived' => null,
        'avatar_url' => null,
        'clone_url' => null,
        'created_at' => 'date-time',
        'default_branch' => null,
        'default_merge_style' => null,
        'description' => null,
        'empty' => null,
        'external_tracker' => null,
        'external_wiki' => null,
        'fork' => null,
        'forks_count' => 'int64',
        'full_name' => null,
        'has_issues' => null,
        'has_projects' => null,
        'has_pull_requests' => null,
        'has_wiki' => null,
        'html_url' => null,
        'id' => 'int64',
        'ignore_whitespace_conflicts' => null,
        'internal' => null,
        'internal_tracker' => null,
        'language' => null,
        'languages_url' => null,
        'mirror' => null,
        'mirror_interval' => null,
        'mirror_updated' => 'date-time',
        'name' => null,
        'open_issues_count' => 'int64',
        'open_pr_counter' => 'int64',
        'original_url' => null,
        'owner' => null,
        'parent' => null,
        'permissions' => null,
        'private' => null,
        'release_counter' => 'int64',
        'repo_transfer' => null,
        'size' => 'int64',
        'ssh_url' => null,
        'stars_count' => 'int64',
        'template' => null,
        'updated_at' => 'date-time',
        'watchers_count' => 'int64',
        'website' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_merge_commits' => 'allow_merge_commits',
        'allow_rebase' => 'allow_rebase',
        'allow_rebase_explicit' => 'allow_rebase_explicit',
        'allow_squash_merge' => 'allow_squash_merge',
        'archived' => 'archived',
        'avatar_url' => 'avatar_url',
        'clone_url' => 'clone_url',
        'created_at' => 'created_at',
        'default_branch' => 'default_branch',
        'default_merge_style' => 'default_merge_style',
        'description' => 'description',
        'empty' => 'empty',
        'external_tracker' => 'external_tracker',
        'external_wiki' => 'external_wiki',
        'fork' => 'fork',
        'forks_count' => 'forks_count',
        'full_name' => 'full_name',
        'has_issues' => 'has_issues',
        'has_projects' => 'has_projects',
        'has_pull_requests' => 'has_pull_requests',
        'has_wiki' => 'has_wiki',
        'html_url' => 'html_url',
        'id' => 'id',
        'ignore_whitespace_conflicts' => 'ignore_whitespace_conflicts',
        'internal' => 'internal',
        'internal_tracker' => 'internal_tracker',
        'language' => 'language',
        'languages_url' => 'languages_url',
        'mirror' => 'mirror',
        'mirror_interval' => 'mirror_interval',
        'mirror_updated' => 'mirror_updated',
        'name' => 'name',
        'open_issues_count' => 'open_issues_count',
        'open_pr_counter' => 'open_pr_counter',
        'original_url' => 'original_url',
        'owner' => 'owner',
        'parent' => 'parent',
        'permissions' => 'permissions',
        'private' => 'private',
        'release_counter' => 'release_counter',
        'repo_transfer' => 'repo_transfer',
        'size' => 'size',
        'ssh_url' => 'ssh_url',
        'stars_count' => 'stars_count',
        'template' => 'template',
        'updated_at' => 'updated_at',
        'watchers_count' => 'watchers_count',
        'website' => 'website'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_merge_commits' => 'setAllowMergeCommits',
        'allow_rebase' => 'setAllowRebase',
        'allow_rebase_explicit' => 'setAllowRebaseExplicit',
        'allow_squash_merge' => 'setAllowSquashMerge',
        'archived' => 'setArchived',
        'avatar_url' => 'setAvatarUrl',
        'clone_url' => 'setCloneUrl',
        'created_at' => 'setCreatedAt',
        'default_branch' => 'setDefaultBranch',
        'default_merge_style' => 'setDefaultMergeStyle',
        'description' => 'setDescription',
        'empty' => 'setEmpty',
        'external_tracker' => 'setExternalTracker',
        'external_wiki' => 'setExternalWiki',
        'fork' => 'setFork',
        'forks_count' => 'setForksCount',
        'full_name' => 'setFullName',
        'has_issues' => 'setHasIssues',
        'has_projects' => 'setHasProjects',
        'has_pull_requests' => 'setHasPullRequests',
        'has_wiki' => 'setHasWiki',
        'html_url' => 'setHtmlUrl',
        'id' => 'setId',
        'ignore_whitespace_conflicts' => 'setIgnoreWhitespaceConflicts',
        'internal' => 'setInternal',
        'internal_tracker' => 'setInternalTracker',
        'language' => 'setLanguage',
        'languages_url' => 'setLanguagesUrl',
        'mirror' => 'setMirror',
        'mirror_interval' => 'setMirrorInterval',
        'mirror_updated' => 'setMirrorUpdated',
        'name' => 'setName',
        'open_issues_count' => 'setOpenIssuesCount',
        'open_pr_counter' => 'setOpenPrCounter',
        'original_url' => 'setOriginalUrl',
        'owner' => 'setOwner',
        'parent' => 'setParent',
        'permissions' => 'setPermissions',
        'private' => 'setPrivate',
        'release_counter' => 'setReleaseCounter',
        'repo_transfer' => 'setRepoTransfer',
        'size' => 'setSize',
        'ssh_url' => 'setSshUrl',
        'stars_count' => 'setStarsCount',
        'template' => 'setTemplate',
        'updated_at' => 'setUpdatedAt',
        'watchers_count' => 'setWatchersCount',
        'website' => 'setWebsite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_merge_commits' => 'getAllowMergeCommits',
        'allow_rebase' => 'getAllowRebase',
        'allow_rebase_explicit' => 'getAllowRebaseExplicit',
        'allow_squash_merge' => 'getAllowSquashMerge',
        'archived' => 'getArchived',
        'avatar_url' => 'getAvatarUrl',
        'clone_url' => 'getCloneUrl',
        'created_at' => 'getCreatedAt',
        'default_branch' => 'getDefaultBranch',
        'default_merge_style' => 'getDefaultMergeStyle',
        'description' => 'getDescription',
        'empty' => 'getEmpty',
        'external_tracker' => 'getExternalTracker',
        'external_wiki' => 'getExternalWiki',
        'fork' => 'getFork',
        'forks_count' => 'getForksCount',
        'full_name' => 'getFullName',
        'has_issues' => 'getHasIssues',
        'has_projects' => 'getHasProjects',
        'has_pull_requests' => 'getHasPullRequests',
        'has_wiki' => 'getHasWiki',
        'html_url' => 'getHtmlUrl',
        'id' => 'getId',
        'ignore_whitespace_conflicts' => 'getIgnoreWhitespaceConflicts',
        'internal' => 'getInternal',
        'internal_tracker' => 'getInternalTracker',
        'language' => 'getLanguage',
        'languages_url' => 'getLanguagesUrl',
        'mirror' => 'getMirror',
        'mirror_interval' => 'getMirrorInterval',
        'mirror_updated' => 'getMirrorUpdated',
        'name' => 'getName',
        'open_issues_count' => 'getOpenIssuesCount',
        'open_pr_counter' => 'getOpenPrCounter',
        'original_url' => 'getOriginalUrl',
        'owner' => 'getOwner',
        'parent' => 'getParent',
        'permissions' => 'getPermissions',
        'private' => 'getPrivate',
        'release_counter' => 'getReleaseCounter',
        'repo_transfer' => 'getRepoTransfer',
        'size' => 'getSize',
        'ssh_url' => 'getSshUrl',
        'stars_count' => 'getStarsCount',
        'template' => 'getTemplate',
        'updated_at' => 'getUpdatedAt',
        'watchers_count' => 'getWatchersCount',
        'website' => 'getWebsite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_merge_commits'] = $data['allow_merge_commits'] ?? null;
        $this->container['allow_rebase'] = $data['allow_rebase'] ?? null;
        $this->container['allow_rebase_explicit'] = $data['allow_rebase_explicit'] ?? null;
        $this->container['allow_squash_merge'] = $data['allow_squash_merge'] ?? null;
        $this->container['archived'] = $data['archived'] ?? null;
        $this->container['avatar_url'] = $data['avatar_url'] ?? null;
        $this->container['clone_url'] = $data['clone_url'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['default_branch'] = $data['default_branch'] ?? null;
        $this->container['default_merge_style'] = $data['default_merge_style'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['empty'] = $data['empty'] ?? null;
        $this->container['external_tracker'] = $data['external_tracker'] ?? null;
        $this->container['external_wiki'] = $data['external_wiki'] ?? null;
        $this->container['fork'] = $data['fork'] ?? null;
        $this->container['forks_count'] = $data['forks_count'] ?? null;
        $this->container['full_name'] = $data['full_name'] ?? null;
        $this->container['has_issues'] = $data['has_issues'] ?? null;
        $this->container['has_projects'] = $data['has_projects'] ?? null;
        $this->container['has_pull_requests'] = $data['has_pull_requests'] ?? null;
        $this->container['has_wiki'] = $data['has_wiki'] ?? null;
        $this->container['html_url'] = $data['html_url'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['ignore_whitespace_conflicts'] = $data['ignore_whitespace_conflicts'] ?? null;
        $this->container['internal'] = $data['internal'] ?? null;
        $this->container['internal_tracker'] = $data['internal_tracker'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['languages_url'] = $data['languages_url'] ?? null;
        $this->container['mirror'] = $data['mirror'] ?? null;
        $this->container['mirror_interval'] = $data['mirror_interval'] ?? null;
        $this->container['mirror_updated'] = $data['mirror_updated'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['open_issues_count'] = $data['open_issues_count'] ?? null;
        $this->container['open_pr_counter'] = $data['open_pr_counter'] ?? null;
        $this->container['original_url'] = $data['original_url'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
        $this->container['parent'] = $data['parent'] ?? null;
        $this->container['permissions'] = $data['permissions'] ?? null;
        $this->container['private'] = $data['private'] ?? null;
        $this->container['release_counter'] = $data['release_counter'] ?? null;
        $this->container['repo_transfer'] = $data['repo_transfer'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['ssh_url'] = $data['ssh_url'] ?? null;
        $this->container['stars_count'] = $data['stars_count'] ?? null;
        $this->container['template'] = $data['template'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['watchers_count'] = $data['watchers_count'] ?? null;
        $this->container['website'] = $data['website'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_merge_commits
     *
     * @return bool|null
     */
    public function getAllowMergeCommits()
    {
        return $this->container['allow_merge_commits'];
    }

    /**
     * Sets allow_merge_commits
     *
     * @param bool|null $allow_merge_commits allow_merge_commits
     *
     * @return self
     */
    public function setAllowMergeCommits($allow_merge_commits)
    {
        $this->container['allow_merge_commits'] = $allow_merge_commits;

        return $this;
    }

    /**
     * Gets allow_rebase
     *
     * @return bool|null
     */
    public function getAllowRebase()
    {
        return $this->container['allow_rebase'];
    }

    /**
     * Sets allow_rebase
     *
     * @param bool|null $allow_rebase allow_rebase
     *
     * @return self
     */
    public function setAllowRebase($allow_rebase)
    {
        $this->container['allow_rebase'] = $allow_rebase;

        return $this;
    }

    /**
     * Gets allow_rebase_explicit
     *
     * @return bool|null
     */
    public function getAllowRebaseExplicit()
    {
        return $this->container['allow_rebase_explicit'];
    }

    /**
     * Sets allow_rebase_explicit
     *
     * @param bool|null $allow_rebase_explicit allow_rebase_explicit
     *
     * @return self
     */
    public function setAllowRebaseExplicit($allow_rebase_explicit)
    {
        $this->container['allow_rebase_explicit'] = $allow_rebase_explicit;

        return $this;
    }

    /**
     * Gets allow_squash_merge
     *
     * @return bool|null
     */
    public function getAllowSquashMerge()
    {
        return $this->container['allow_squash_merge'];
    }

    /**
     * Sets allow_squash_merge
     *
     * @param bool|null $allow_squash_merge allow_squash_merge
     *
     * @return self
     */
    public function setAllowSquashMerge($allow_squash_merge)
    {
        $this->container['allow_squash_merge'] = $allow_squash_merge;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string|null
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string|null $avatar_url avatar_url
     *
     * @return self
     */
    public function setAvatarUrl($avatar_url)
    {
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets clone_url
     *
     * @return string|null
     */
    public function getCloneUrl()
    {
        return $this->container['clone_url'];
    }

    /**
     * Sets clone_url
     *
     * @param string|null $clone_url clone_url
     *
     * @return self
     */
    public function setCloneUrl($clone_url)
    {
        $this->container['clone_url'] = $clone_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets default_branch
     *
     * @return string|null
     */
    public function getDefaultBranch()
    {
        return $this->container['default_branch'];
    }

    /**
     * Sets default_branch
     *
     * @param string|null $default_branch default_branch
     *
     * @return self
     */
    public function setDefaultBranch($default_branch)
    {
        $this->container['default_branch'] = $default_branch;

        return $this;
    }

    /**
     * Gets default_merge_style
     *
     * @return string|null
     */
    public function getDefaultMergeStyle()
    {
        return $this->container['default_merge_style'];
    }

    /**
     * Sets default_merge_style
     *
     * @param string|null $default_merge_style default_merge_style
     *
     * @return self
     */
    public function setDefaultMergeStyle($default_merge_style)
    {
        $this->container['default_merge_style'] = $default_merge_style;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets empty
     *
     * @return bool|null
     */
    public function getEmpty()
    {
        return $this->container['empty'];
    }

    /**
     * Sets empty
     *
     * @param bool|null $empty empty
     *
     * @return self
     */
    public function setEmpty($empty)
    {
        $this->container['empty'] = $empty;

        return $this;
    }

    /**
     * Gets external_tracker
     *
     * @return \Efsa\Client\Model\ExternalTracker|null
     */
    public function getExternalTracker()
    {
        return $this->container['external_tracker'];
    }

    /**
     * Sets external_tracker
     *
     * @param \Efsa\Client\Model\ExternalTracker|null $external_tracker external_tracker
     *
     * @return self
     */
    public function setExternalTracker($external_tracker)
    {
        $this->container['external_tracker'] = $external_tracker;

        return $this;
    }

    /**
     * Gets external_wiki
     *
     * @return \Efsa\Client\Model\ExternalWiki|null
     */
    public function getExternalWiki()
    {
        return $this->container['external_wiki'];
    }

    /**
     * Sets external_wiki
     *
     * @param \Efsa\Client\Model\ExternalWiki|null $external_wiki external_wiki
     *
     * @return self
     */
    public function setExternalWiki($external_wiki)
    {
        $this->container['external_wiki'] = $external_wiki;

        return $this;
    }

    /**
     * Gets fork
     *
     * @return bool|null
     */
    public function getFork()
    {
        return $this->container['fork'];
    }

    /**
     * Sets fork
     *
     * @param bool|null $fork fork
     *
     * @return self
     */
    public function setFork($fork)
    {
        $this->container['fork'] = $fork;

        return $this;
    }

    /**
     * Gets forks_count
     *
     * @return int|null
     */
    public function getForksCount()
    {
        return $this->container['forks_count'];
    }

    /**
     * Sets forks_count
     *
     * @param int|null $forks_count forks_count
     *
     * @return self
     */
    public function setForksCount($forks_count)
    {
        $this->container['forks_count'] = $forks_count;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name full_name
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets has_issues
     *
     * @return bool|null
     */
    public function getHasIssues()
    {
        return $this->container['has_issues'];
    }

    /**
     * Sets has_issues
     *
     * @param bool|null $has_issues has_issues
     *
     * @return self
     */
    public function setHasIssues($has_issues)
    {
        $this->container['has_issues'] = $has_issues;

        return $this;
    }

    /**
     * Gets has_projects
     *
     * @return bool|null
     */
    public function getHasProjects()
    {
        return $this->container['has_projects'];
    }

    /**
     * Sets has_projects
     *
     * @param bool|null $has_projects has_projects
     *
     * @return self
     */
    public function setHasProjects($has_projects)
    {
        $this->container['has_projects'] = $has_projects;

        return $this;
    }

    /**
     * Gets has_pull_requests
     *
     * @return bool|null
     */
    public function getHasPullRequests()
    {
        return $this->container['has_pull_requests'];
    }

    /**
     * Sets has_pull_requests
     *
     * @param bool|null $has_pull_requests has_pull_requests
     *
     * @return self
     */
    public function setHasPullRequests($has_pull_requests)
    {
        $this->container['has_pull_requests'] = $has_pull_requests;

        return $this;
    }

    /**
     * Gets has_wiki
     *
     * @return bool|null
     */
    public function getHasWiki()
    {
        return $this->container['has_wiki'];
    }

    /**
     * Sets has_wiki
     *
     * @param bool|null $has_wiki has_wiki
     *
     * @return self
     */
    public function setHasWiki($has_wiki)
    {
        $this->container['has_wiki'] = $has_wiki;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string|null
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string|null $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ignore_whitespace_conflicts
     *
     * @return bool|null
     */
    public function getIgnoreWhitespaceConflicts()
    {
        return $this->container['ignore_whitespace_conflicts'];
    }

    /**
     * Sets ignore_whitespace_conflicts
     *
     * @param bool|null $ignore_whitespace_conflicts ignore_whitespace_conflicts
     *
     * @return self
     */
    public function setIgnoreWhitespaceConflicts($ignore_whitespace_conflicts)
    {
        $this->container['ignore_whitespace_conflicts'] = $ignore_whitespace_conflicts;

        return $this;
    }

    /**
     * Gets internal
     *
     * @return bool|null
     */
    public function getInternal()
    {
        return $this->container['internal'];
    }

    /**
     * Sets internal
     *
     * @param bool|null $internal internal
     *
     * @return self
     */
    public function setInternal($internal)
    {
        $this->container['internal'] = $internal;

        return $this;
    }

    /**
     * Gets internal_tracker
     *
     * @return \Efsa\Client\Model\InternalTracker|null
     */
    public function getInternalTracker()
    {
        return $this->container['internal_tracker'];
    }

    /**
     * Sets internal_tracker
     *
     * @param \Efsa\Client\Model\InternalTracker|null $internal_tracker internal_tracker
     *
     * @return self
     */
    public function setInternalTracker($internal_tracker)
    {
        $this->container['internal_tracker'] = $internal_tracker;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets languages_url
     *
     * @return string|null
     */
    public function getLanguagesUrl()
    {
        return $this->container['languages_url'];
    }

    /**
     * Sets languages_url
     *
     * @param string|null $languages_url languages_url
     *
     * @return self
     */
    public function setLanguagesUrl($languages_url)
    {
        $this->container['languages_url'] = $languages_url;

        return $this;
    }

    /**
     * Gets mirror
     *
     * @return bool|null
     */
    public function getMirror()
    {
        return $this->container['mirror'];
    }

    /**
     * Sets mirror
     *
     * @param bool|null $mirror mirror
     *
     * @return self
     */
    public function setMirror($mirror)
    {
        $this->container['mirror'] = $mirror;

        return $this;
    }

    /**
     * Gets mirror_interval
     *
     * @return string|null
     */
    public function getMirrorInterval()
    {
        return $this->container['mirror_interval'];
    }

    /**
     * Sets mirror_interval
     *
     * @param string|null $mirror_interval mirror_interval
     *
     * @return self
     */
    public function setMirrorInterval($mirror_interval)
    {
        $this->container['mirror_interval'] = $mirror_interval;

        return $this;
    }

    /**
     * Gets mirror_updated
     *
     * @return \DateTime|null
     */
    public function getMirrorUpdated()
    {
        return $this->container['mirror_updated'];
    }

    /**
     * Sets mirror_updated
     *
     * @param \DateTime|null $mirror_updated mirror_updated
     *
     * @return self
     */
    public function setMirrorUpdated($mirror_updated)
    {
        $this->container['mirror_updated'] = $mirror_updated;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets open_issues_count
     *
     * @return int|null
     */
    public function getOpenIssuesCount()
    {
        return $this->container['open_issues_count'];
    }

    /**
     * Sets open_issues_count
     *
     * @param int|null $open_issues_count open_issues_count
     *
     * @return self
     */
    public function setOpenIssuesCount($open_issues_count)
    {
        $this->container['open_issues_count'] = $open_issues_count;

        return $this;
    }

    /**
     * Gets open_pr_counter
     *
     * @return int|null
     */
    public function getOpenPrCounter()
    {
        return $this->container['open_pr_counter'];
    }

    /**
     * Sets open_pr_counter
     *
     * @param int|null $open_pr_counter open_pr_counter
     *
     * @return self
     */
    public function setOpenPrCounter($open_pr_counter)
    {
        $this->container['open_pr_counter'] = $open_pr_counter;

        return $this;
    }

    /**
     * Gets original_url
     *
     * @return string|null
     */
    public function getOriginalUrl()
    {
        return $this->container['original_url'];
    }

    /**
     * Sets original_url
     *
     * @param string|null $original_url original_url
     *
     * @return self
     */
    public function setOriginalUrl($original_url)
    {
        $this->container['original_url'] = $original_url;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Efsa\Client\Model\User|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Efsa\Client\Model\User|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \Efsa\Client\Model\Repository|null
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \Efsa\Client\Model\Repository|null $parent parent
     *
     * @return self
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \Efsa\Client\Model\Permission|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \Efsa\Client\Model\Permission|null $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool|null
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool|null $private private
     *
     * @return self
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets release_counter
     *
     * @return int|null
     */
    public function getReleaseCounter()
    {
        return $this->container['release_counter'];
    }

    /**
     * Sets release_counter
     *
     * @param int|null $release_counter release_counter
     *
     * @return self
     */
    public function setReleaseCounter($release_counter)
    {
        $this->container['release_counter'] = $release_counter;

        return $this;
    }

    /**
     * Gets repo_transfer
     *
     * @return \Efsa\Client\Model\RepoTransfer|null
     */
    public function getRepoTransfer()
    {
        return $this->container['repo_transfer'];
    }

    /**
     * Sets repo_transfer
     *
     * @param \Efsa\Client\Model\RepoTransfer|null $repo_transfer repo_transfer
     *
     * @return self
     */
    public function setRepoTransfer($repo_transfer)
    {
        $this->container['repo_transfer'] = $repo_transfer;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets ssh_url
     *
     * @return string|null
     */
    public function getSshUrl()
    {
        return $this->container['ssh_url'];
    }

    /**
     * Sets ssh_url
     *
     * @param string|null $ssh_url ssh_url
     *
     * @return self
     */
    public function setSshUrl($ssh_url)
    {
        $this->container['ssh_url'] = $ssh_url;

        return $this;
    }

    /**
     * Gets stars_count
     *
     * @return int|null
     */
    public function getStarsCount()
    {
        return $this->container['stars_count'];
    }

    /**
     * Sets stars_count
     *
     * @param int|null $stars_count stars_count
     *
     * @return self
     */
    public function setStarsCount($stars_count)
    {
        $this->container['stars_count'] = $stars_count;

        return $this;
    }

    /**
     * Gets template
     *
     * @return bool|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param bool|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets watchers_count
     *
     * @return int|null
     */
    public function getWatchersCount()
    {
        return $this->container['watchers_count'];
    }

    /**
     * Sets watchers_count
     *
     * @param int|null $watchers_count watchers_count
     *
     * @return self
     */
    public function setWatchersCount($watchers_count)
    {
        $this->container['watchers_count'] = $watchers_count;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


