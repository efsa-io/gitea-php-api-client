<?php
/**
 * TimelineComment
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Gitea\Model;

use \ArrayAccess;
use \Efsa\Client\Gitea\ObjectSerializer;

/**
 * TimelineComment Class Doc Comment
 *
 * @category Class
 * @description TimelineComment represents a timeline comment (comment of any type) on a commit or issue
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TimelineComment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimelineComment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assignee' => '\Efsa\Client\Gitea\Model\User',
        'assignee_team' => '\Efsa\Client\Gitea\Model\Team',
        'body' => 'string',
        'created_at' => '\DateTime',
        'dependent_issue' => '\Efsa\Client\Gitea\Model\Issue',
        'html_url' => 'string',
        'id' => 'int',
        'issue_url' => 'string',
        'label' => '\Efsa\Client\Gitea\Model\Label',
        'milestone' => '\Efsa\Client\Gitea\Model\Milestone',
        'new_ref' => 'string',
        'new_title' => 'string',
        'old_milestone' => '\Efsa\Client\Gitea\Model\Milestone',
        'old_project_id' => 'int',
        'old_ref' => 'string',
        'old_title' => 'string',
        'project_id' => 'int',
        'pull_request_url' => 'string',
        'ref_action' => 'string',
        'ref_comment' => '\Efsa\Client\Gitea\Model\Comment',
        'ref_commit_sha' => 'string',
        'ref_issue' => '\Efsa\Client\Gitea\Model\Issue',
        'removed_assignee' => 'bool',
        'resolve_doer' => '\Efsa\Client\Gitea\Model\User',
        'review_id' => 'int',
        'tracked_time' => '\Efsa\Client\Gitea\Model\TrackedTime',
        'type' => 'string',
        'updated_at' => '\DateTime',
        'user' => '\Efsa\Client\Gitea\Model\User'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assignee' => null,
        'assignee_team' => null,
        'body' => null,
        'created_at' => 'date-time',
        'dependent_issue' => null,
        'html_url' => null,
        'id' => 'int64',
        'issue_url' => null,
        'label' => null,
        'milestone' => null,
        'new_ref' => null,
        'new_title' => null,
        'old_milestone' => null,
        'old_project_id' => 'int64',
        'old_ref' => null,
        'old_title' => null,
        'project_id' => 'int64',
        'pull_request_url' => null,
        'ref_action' => null,
        'ref_comment' => null,
        'ref_commit_sha' => null,
        'ref_issue' => null,
        'removed_assignee' => null,
        'resolve_doer' => null,
        'review_id' => 'int64',
        'tracked_time' => null,
        'type' => null,
        'updated_at' => 'date-time',
        'user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assignee' => 'assignee',
        'assignee_team' => 'assignee_team',
        'body' => 'body',
        'created_at' => 'created_at',
        'dependent_issue' => 'dependent_issue',
        'html_url' => 'html_url',
        'id' => 'id',
        'issue_url' => 'issue_url',
        'label' => 'label',
        'milestone' => 'milestone',
        'new_ref' => 'new_ref',
        'new_title' => 'new_title',
        'old_milestone' => 'old_milestone',
        'old_project_id' => 'old_project_id',
        'old_ref' => 'old_ref',
        'old_title' => 'old_title',
        'project_id' => 'project_id',
        'pull_request_url' => 'pull_request_url',
        'ref_action' => 'ref_action',
        'ref_comment' => 'ref_comment',
        'ref_commit_sha' => 'ref_commit_sha',
        'ref_issue' => 'ref_issue',
        'removed_assignee' => 'removed_assignee',
        'resolve_doer' => 'resolve_doer',
        'review_id' => 'review_id',
        'tracked_time' => 'tracked_time',
        'type' => 'type',
        'updated_at' => 'updated_at',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assignee' => 'setAssignee',
        'assignee_team' => 'setAssigneeTeam',
        'body' => 'setBody',
        'created_at' => 'setCreatedAt',
        'dependent_issue' => 'setDependentIssue',
        'html_url' => 'setHtmlUrl',
        'id' => 'setId',
        'issue_url' => 'setIssueUrl',
        'label' => 'setLabel',
        'milestone' => 'setMilestone',
        'new_ref' => 'setNewRef',
        'new_title' => 'setNewTitle',
        'old_milestone' => 'setOldMilestone',
        'old_project_id' => 'setOldProjectId',
        'old_ref' => 'setOldRef',
        'old_title' => 'setOldTitle',
        'project_id' => 'setProjectId',
        'pull_request_url' => 'setPullRequestUrl',
        'ref_action' => 'setRefAction',
        'ref_comment' => 'setRefComment',
        'ref_commit_sha' => 'setRefCommitSha',
        'ref_issue' => 'setRefIssue',
        'removed_assignee' => 'setRemovedAssignee',
        'resolve_doer' => 'setResolveDoer',
        'review_id' => 'setReviewId',
        'tracked_time' => 'setTrackedTime',
        'type' => 'setType',
        'updated_at' => 'setUpdatedAt',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assignee' => 'getAssignee',
        'assignee_team' => 'getAssigneeTeam',
        'body' => 'getBody',
        'created_at' => 'getCreatedAt',
        'dependent_issue' => 'getDependentIssue',
        'html_url' => 'getHtmlUrl',
        'id' => 'getId',
        'issue_url' => 'getIssueUrl',
        'label' => 'getLabel',
        'milestone' => 'getMilestone',
        'new_ref' => 'getNewRef',
        'new_title' => 'getNewTitle',
        'old_milestone' => 'getOldMilestone',
        'old_project_id' => 'getOldProjectId',
        'old_ref' => 'getOldRef',
        'old_title' => 'getOldTitle',
        'project_id' => 'getProjectId',
        'pull_request_url' => 'getPullRequestUrl',
        'ref_action' => 'getRefAction',
        'ref_comment' => 'getRefComment',
        'ref_commit_sha' => 'getRefCommitSha',
        'ref_issue' => 'getRefIssue',
        'removed_assignee' => 'getRemovedAssignee',
        'resolve_doer' => 'getResolveDoer',
        'review_id' => 'getReviewId',
        'tracked_time' => 'getTrackedTime',
        'type' => 'getType',
        'updated_at' => 'getUpdatedAt',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assignee'] = $data['assignee'] ?? null;
        $this->container['assignee_team'] = $data['assignee_team'] ?? null;
        $this->container['body'] = $data['body'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['dependent_issue'] = $data['dependent_issue'] ?? null;
        $this->container['html_url'] = $data['html_url'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['issue_url'] = $data['issue_url'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['milestone'] = $data['milestone'] ?? null;
        $this->container['new_ref'] = $data['new_ref'] ?? null;
        $this->container['new_title'] = $data['new_title'] ?? null;
        $this->container['old_milestone'] = $data['old_milestone'] ?? null;
        $this->container['old_project_id'] = $data['old_project_id'] ?? null;
        $this->container['old_ref'] = $data['old_ref'] ?? null;
        $this->container['old_title'] = $data['old_title'] ?? null;
        $this->container['project_id'] = $data['project_id'] ?? null;
        $this->container['pull_request_url'] = $data['pull_request_url'] ?? null;
        $this->container['ref_action'] = $data['ref_action'] ?? null;
        $this->container['ref_comment'] = $data['ref_comment'] ?? null;
        $this->container['ref_commit_sha'] = $data['ref_commit_sha'] ?? null;
        $this->container['ref_issue'] = $data['ref_issue'] ?? null;
        $this->container['removed_assignee'] = $data['removed_assignee'] ?? null;
        $this->container['resolve_doer'] = $data['resolve_doer'] ?? null;
        $this->container['review_id'] = $data['review_id'] ?? null;
        $this->container['tracked_time'] = $data['tracked_time'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assignee
     *
     * @return \Efsa\Client\Gitea\Model\User|null
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param \Efsa\Client\Gitea\Model\User|null $assignee assignee
     *
     * @return self
     */
    public function setAssignee($assignee)
    {
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets assignee_team
     *
     * @return \Efsa\Client\Gitea\Model\Team|null
     */
    public function getAssigneeTeam()
    {
        return $this->container['assignee_team'];
    }

    /**
     * Sets assignee_team
     *
     * @param \Efsa\Client\Gitea\Model\Team|null $assignee_team assignee_team
     *
     * @return self
     */
    public function setAssigneeTeam($assignee_team)
    {
        $this->container['assignee_team'] = $assignee_team;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets dependent_issue
     *
     * @return \Efsa\Client\Gitea\Model\Issue|null
     */
    public function getDependentIssue()
    {
        return $this->container['dependent_issue'];
    }

    /**
     * Sets dependent_issue
     *
     * @param \Efsa\Client\Gitea\Model\Issue|null $dependent_issue dependent_issue
     *
     * @return self
     */
    public function setDependentIssue($dependent_issue)
    {
        $this->container['dependent_issue'] = $dependent_issue;

        return $this;
    }

    /**
     * Gets html_url
     *
     * @return string|null
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     *
     * @param string|null $html_url html_url
     *
     * @return self
     */
    public function setHtmlUrl($html_url)
    {
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets issue_url
     *
     * @return string|null
     */
    public function getIssueUrl()
    {
        return $this->container['issue_url'];
    }

    /**
     * Sets issue_url
     *
     * @param string|null $issue_url issue_url
     *
     * @return self
     */
    public function setIssueUrl($issue_url)
    {
        $this->container['issue_url'] = $issue_url;

        return $this;
    }

    /**
     * Gets label
     *
     * @return \Efsa\Client\Gitea\Model\Label|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param \Efsa\Client\Gitea\Model\Label|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets milestone
     *
     * @return \Efsa\Client\Gitea\Model\Milestone|null
     */
    public function getMilestone()
    {
        return $this->container['milestone'];
    }

    /**
     * Sets milestone
     *
     * @param \Efsa\Client\Gitea\Model\Milestone|null $milestone milestone
     *
     * @return self
     */
    public function setMilestone($milestone)
    {
        $this->container['milestone'] = $milestone;

        return $this;
    }

    /**
     * Gets new_ref
     *
     * @return string|null
     */
    public function getNewRef()
    {
        return $this->container['new_ref'];
    }

    /**
     * Sets new_ref
     *
     * @param string|null $new_ref new_ref
     *
     * @return self
     */
    public function setNewRef($new_ref)
    {
        $this->container['new_ref'] = $new_ref;

        return $this;
    }

    /**
     * Gets new_title
     *
     * @return string|null
     */
    public function getNewTitle()
    {
        return $this->container['new_title'];
    }

    /**
     * Sets new_title
     *
     * @param string|null $new_title new_title
     *
     * @return self
     */
    public function setNewTitle($new_title)
    {
        $this->container['new_title'] = $new_title;

        return $this;
    }

    /**
     * Gets old_milestone
     *
     * @return \Efsa\Client\Gitea\Model\Milestone|null
     */
    public function getOldMilestone()
    {
        return $this->container['old_milestone'];
    }

    /**
     * Sets old_milestone
     *
     * @param \Efsa\Client\Gitea\Model\Milestone|null $old_milestone old_milestone
     *
     * @return self
     */
    public function setOldMilestone($old_milestone)
    {
        $this->container['old_milestone'] = $old_milestone;

        return $this;
    }

    /**
     * Gets old_project_id
     *
     * @return int|null
     */
    public function getOldProjectId()
    {
        return $this->container['old_project_id'];
    }

    /**
     * Sets old_project_id
     *
     * @param int|null $old_project_id old_project_id
     *
     * @return self
     */
    public function setOldProjectId($old_project_id)
    {
        $this->container['old_project_id'] = $old_project_id;

        return $this;
    }

    /**
     * Gets old_ref
     *
     * @return string|null
     */
    public function getOldRef()
    {
        return $this->container['old_ref'];
    }

    /**
     * Sets old_ref
     *
     * @param string|null $old_ref old_ref
     *
     * @return self
     */
    public function setOldRef($old_ref)
    {
        $this->container['old_ref'] = $old_ref;

        return $this;
    }

    /**
     * Gets old_title
     *
     * @return string|null
     */
    public function getOldTitle()
    {
        return $this->container['old_title'];
    }

    /**
     * Sets old_title
     *
     * @param string|null $old_title old_title
     *
     * @return self
     */
    public function setOldTitle($old_title)
    {
        $this->container['old_title'] = $old_title;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets pull_request_url
     *
     * @return string|null
     */
    public function getPullRequestUrl()
    {
        return $this->container['pull_request_url'];
    }

    /**
     * Sets pull_request_url
     *
     * @param string|null $pull_request_url pull_request_url
     *
     * @return self
     */
    public function setPullRequestUrl($pull_request_url)
    {
        $this->container['pull_request_url'] = $pull_request_url;

        return $this;
    }

    /**
     * Gets ref_action
     *
     * @return string|null
     */
    public function getRefAction()
    {
        return $this->container['ref_action'];
    }

    /**
     * Sets ref_action
     *
     * @param string|null $ref_action ref_action
     *
     * @return self
     */
    public function setRefAction($ref_action)
    {
        $this->container['ref_action'] = $ref_action;

        return $this;
    }

    /**
     * Gets ref_comment
     *
     * @return \Efsa\Client\Gitea\Model\Comment|null
     */
    public function getRefComment()
    {
        return $this->container['ref_comment'];
    }

    /**
     * Sets ref_comment
     *
     * @param \Efsa\Client\Gitea\Model\Comment|null $ref_comment ref_comment
     *
     * @return self
     */
    public function setRefComment($ref_comment)
    {
        $this->container['ref_comment'] = $ref_comment;

        return $this;
    }

    /**
     * Gets ref_commit_sha
     *
     * @return string|null
     */
    public function getRefCommitSha()
    {
        return $this->container['ref_commit_sha'];
    }

    /**
     * Sets ref_commit_sha
     *
     * @param string|null $ref_commit_sha commit SHA where issue/PR was referenced
     *
     * @return self
     */
    public function setRefCommitSha($ref_commit_sha)
    {
        $this->container['ref_commit_sha'] = $ref_commit_sha;

        return $this;
    }

    /**
     * Gets ref_issue
     *
     * @return \Efsa\Client\Gitea\Model\Issue|null
     */
    public function getRefIssue()
    {
        return $this->container['ref_issue'];
    }

    /**
     * Sets ref_issue
     *
     * @param \Efsa\Client\Gitea\Model\Issue|null $ref_issue ref_issue
     *
     * @return self
     */
    public function setRefIssue($ref_issue)
    {
        $this->container['ref_issue'] = $ref_issue;

        return $this;
    }

    /**
     * Gets removed_assignee
     *
     * @return bool|null
     */
    public function getRemovedAssignee()
    {
        return $this->container['removed_assignee'];
    }

    /**
     * Sets removed_assignee
     *
     * @param bool|null $removed_assignee whether the assignees were removed or added
     *
     * @return self
     */
    public function setRemovedAssignee($removed_assignee)
    {
        $this->container['removed_assignee'] = $removed_assignee;

        return $this;
    }

    /**
     * Gets resolve_doer
     *
     * @return \Efsa\Client\Gitea\Model\User|null
     */
    public function getResolveDoer()
    {
        return $this->container['resolve_doer'];
    }

    /**
     * Sets resolve_doer
     *
     * @param \Efsa\Client\Gitea\Model\User|null $resolve_doer resolve_doer
     *
     * @return self
     */
    public function setResolveDoer($resolve_doer)
    {
        $this->container['resolve_doer'] = $resolve_doer;

        return $this;
    }

    /**
     * Gets review_id
     *
     * @return int|null
     */
    public function getReviewId()
    {
        return $this->container['review_id'];
    }

    /**
     * Sets review_id
     *
     * @param int|null $review_id review_id
     *
     * @return self
     */
    public function setReviewId($review_id)
    {
        $this->container['review_id'] = $review_id;

        return $this;
    }

    /**
     * Gets tracked_time
     *
     * @return \Efsa\Client\Gitea\Model\TrackedTime|null
     */
    public function getTrackedTime()
    {
        return $this->container['tracked_time'];
    }

    /**
     * Sets tracked_time
     *
     * @param \Efsa\Client\Gitea\Model\TrackedTime|null $tracked_time tracked_time
     *
     * @return self
     */
    public function setTrackedTime($tracked_time)
    {
        $this->container['tracked_time'] = $tracked_time;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Efsa\Client\Gitea\Model\User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Efsa\Client\Gitea\Model\User|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


