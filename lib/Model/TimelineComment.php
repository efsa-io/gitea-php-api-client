<?php
/**
 * TimelineComment
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Gitea\Model;

use \ArrayAccess;
use \Efsa\Client\Gitea\ObjectSerializer;

/**
 * TimelineComment Class Doc Comment
 *
 * @category Class
 * @description TimelineComment represents a timeline comment (comment of any type) on a commit or issue
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TimelineComment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimelineComment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assignee' => '\Efsa\Client\Gitea\Model\User',
        'assigneeTeam' => '\Efsa\Client\Gitea\Model\Team',
        'body' => 'string',
        'createdAt' => '\DateTime',
        'dependentIssue' => '\Efsa\Client\Gitea\Model\Issue',
        'htmlUrl' => 'string',
        'id' => 'int',
        'issueUrl' => 'string',
        'label' => '\Efsa\Client\Gitea\Model\Label',
        'milestone' => '\Efsa\Client\Gitea\Model\Milestone',
        'newRef' => 'string',
        'newTitle' => 'string',
        'oldMilestone' => '\Efsa\Client\Gitea\Model\Milestone',
        'oldProjectId' => 'int',
        'oldRef' => 'string',
        'oldTitle' => 'string',
        'projectId' => 'int',
        'pullRequestUrl' => 'string',
        'refAction' => 'string',
        'refComment' => '\Efsa\Client\Gitea\Model\Comment',
        'refCommitSha' => 'string',
        'refIssue' => '\Efsa\Client\Gitea\Model\Issue',
        'removedAssignee' => 'bool',
        'resolveDoer' => '\Efsa\Client\Gitea\Model\User',
        'reviewId' => 'int',
        'trackedTime' => '\Efsa\Client\Gitea\Model\TrackedTime',
        'type' => 'string',
        'updatedAt' => '\DateTime',
        'user' => '\Efsa\Client\Gitea\Model\User'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assignee' => null,
        'assigneeTeam' => null,
        'body' => null,
        'createdAt' => 'date-time',
        'dependentIssue' => null,
        'htmlUrl' => null,
        'id' => 'int64',
        'issueUrl' => null,
        'label' => null,
        'milestone' => null,
        'newRef' => null,
        'newTitle' => null,
        'oldMilestone' => null,
        'oldProjectId' => 'int64',
        'oldRef' => null,
        'oldTitle' => null,
        'projectId' => 'int64',
        'pullRequestUrl' => null,
        'refAction' => null,
        'refComment' => null,
        'refCommitSha' => null,
        'refIssue' => null,
        'removedAssignee' => null,
        'resolveDoer' => null,
        'reviewId' => 'int64',
        'trackedTime' => null,
        'type' => null,
        'updatedAt' => 'date-time',
        'user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assignee' => 'assignee',
        'assigneeTeam' => 'assignee_team',
        'body' => 'body',
        'createdAt' => 'created_at',
        'dependentIssue' => 'dependent_issue',
        'htmlUrl' => 'html_url',
        'id' => 'id',
        'issueUrl' => 'issue_url',
        'label' => 'label',
        'milestone' => 'milestone',
        'newRef' => 'new_ref',
        'newTitle' => 'new_title',
        'oldMilestone' => 'old_milestone',
        'oldProjectId' => 'old_project_id',
        'oldRef' => 'old_ref',
        'oldTitle' => 'old_title',
        'projectId' => 'project_id',
        'pullRequestUrl' => 'pull_request_url',
        'refAction' => 'ref_action',
        'refComment' => 'ref_comment',
        'refCommitSha' => 'ref_commit_sha',
        'refIssue' => 'ref_issue',
        'removedAssignee' => 'removed_assignee',
        'resolveDoer' => 'resolve_doer',
        'reviewId' => 'review_id',
        'trackedTime' => 'tracked_time',
        'type' => 'type',
        'updatedAt' => 'updated_at',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assignee' => 'setAssignee',
        'assigneeTeam' => 'setAssigneeTeam',
        'body' => 'setBody',
        'createdAt' => 'setCreatedAt',
        'dependentIssue' => 'setDependentIssue',
        'htmlUrl' => 'setHtmlUrl',
        'id' => 'setId',
        'issueUrl' => 'setIssueUrl',
        'label' => 'setLabel',
        'milestone' => 'setMilestone',
        'newRef' => 'setNewRef',
        'newTitle' => 'setNewTitle',
        'oldMilestone' => 'setOldMilestone',
        'oldProjectId' => 'setOldProjectId',
        'oldRef' => 'setOldRef',
        'oldTitle' => 'setOldTitle',
        'projectId' => 'setProjectId',
        'pullRequestUrl' => 'setPullRequestUrl',
        'refAction' => 'setRefAction',
        'refComment' => 'setRefComment',
        'refCommitSha' => 'setRefCommitSha',
        'refIssue' => 'setRefIssue',
        'removedAssignee' => 'setRemovedAssignee',
        'resolveDoer' => 'setResolveDoer',
        'reviewId' => 'setReviewId',
        'trackedTime' => 'setTrackedTime',
        'type' => 'setType',
        'updatedAt' => 'setUpdatedAt',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assignee' => 'getAssignee',
        'assigneeTeam' => 'getAssigneeTeam',
        'body' => 'getBody',
        'createdAt' => 'getCreatedAt',
        'dependentIssue' => 'getDependentIssue',
        'htmlUrl' => 'getHtmlUrl',
        'id' => 'getId',
        'issueUrl' => 'getIssueUrl',
        'label' => 'getLabel',
        'milestone' => 'getMilestone',
        'newRef' => 'getNewRef',
        'newTitle' => 'getNewTitle',
        'oldMilestone' => 'getOldMilestone',
        'oldProjectId' => 'getOldProjectId',
        'oldRef' => 'getOldRef',
        'oldTitle' => 'getOldTitle',
        'projectId' => 'getProjectId',
        'pullRequestUrl' => 'getPullRequestUrl',
        'refAction' => 'getRefAction',
        'refComment' => 'getRefComment',
        'refCommitSha' => 'getRefCommitSha',
        'refIssue' => 'getRefIssue',
        'removedAssignee' => 'getRemovedAssignee',
        'resolveDoer' => 'getResolveDoer',
        'reviewId' => 'getReviewId',
        'trackedTime' => 'getTrackedTime',
        'type' => 'getType',
        'updatedAt' => 'getUpdatedAt',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assignee'] = $data['assignee'] ?? null;
        $this->container['assigneeTeam'] = $data['assigneeTeam'] ?? null;
        $this->container['body'] = $data['body'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['dependentIssue'] = $data['dependentIssue'] ?? null;
        $this->container['htmlUrl'] = $data['htmlUrl'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['issueUrl'] = $data['issueUrl'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['milestone'] = $data['milestone'] ?? null;
        $this->container['newRef'] = $data['newRef'] ?? null;
        $this->container['newTitle'] = $data['newTitle'] ?? null;
        $this->container['oldMilestone'] = $data['oldMilestone'] ?? null;
        $this->container['oldProjectId'] = $data['oldProjectId'] ?? null;
        $this->container['oldRef'] = $data['oldRef'] ?? null;
        $this->container['oldTitle'] = $data['oldTitle'] ?? null;
        $this->container['projectId'] = $data['projectId'] ?? null;
        $this->container['pullRequestUrl'] = $data['pullRequestUrl'] ?? null;
        $this->container['refAction'] = $data['refAction'] ?? null;
        $this->container['refComment'] = $data['refComment'] ?? null;
        $this->container['refCommitSha'] = $data['refCommitSha'] ?? null;
        $this->container['refIssue'] = $data['refIssue'] ?? null;
        $this->container['removedAssignee'] = $data['removedAssignee'] ?? null;
        $this->container['resolveDoer'] = $data['resolveDoer'] ?? null;
        $this->container['reviewId'] = $data['reviewId'] ?? null;
        $this->container['trackedTime'] = $data['trackedTime'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['updatedAt'] = $data['updatedAt'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assignee
     *
     * @return \Efsa\Client\Gitea\Model\User|null
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param \Efsa\Client\Gitea\Model\User|null $assignee assignee
     *
     * @return self
     */
    public function setAssignee($assignee)
    {
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets assigneeTeam
     *
     * @return \Efsa\Client\Gitea\Model\Team|null
     */
    public function getAssigneeTeam()
    {
        return $this->container['assigneeTeam'];
    }

    /**
     * Sets assigneeTeam
     *
     * @param \Efsa\Client\Gitea\Model\Team|null $assigneeTeam assigneeTeam
     *
     * @return self
     */
    public function setAssigneeTeam($assigneeTeam)
    {
        $this->container['assigneeTeam'] = $assigneeTeam;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets dependentIssue
     *
     * @return \Efsa\Client\Gitea\Model\Issue|null
     */
    public function getDependentIssue()
    {
        return $this->container['dependentIssue'];
    }

    /**
     * Sets dependentIssue
     *
     * @param \Efsa\Client\Gitea\Model\Issue|null $dependentIssue dependentIssue
     *
     * @return self
     */
    public function setDependentIssue($dependentIssue)
    {
        $this->container['dependentIssue'] = $dependentIssue;

        return $this;
    }

    /**
     * Gets htmlUrl
     *
     * @return string|null
     */
    public function getHtmlUrl()
    {
        return $this->container['htmlUrl'];
    }

    /**
     * Sets htmlUrl
     *
     * @param string|null $htmlUrl htmlUrl
     *
     * @return self
     */
    public function setHtmlUrl($htmlUrl)
    {
        $this->container['htmlUrl'] = $htmlUrl;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets issueUrl
     *
     * @return string|null
     */
    public function getIssueUrl()
    {
        return $this->container['issueUrl'];
    }

    /**
     * Sets issueUrl
     *
     * @param string|null $issueUrl issueUrl
     *
     * @return self
     */
    public function setIssueUrl($issueUrl)
    {
        $this->container['issueUrl'] = $issueUrl;

        return $this;
    }

    /**
     * Gets label
     *
     * @return \Efsa\Client\Gitea\Model\Label|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param \Efsa\Client\Gitea\Model\Label|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets milestone
     *
     * @return \Efsa\Client\Gitea\Model\Milestone|null
     */
    public function getMilestone()
    {
        return $this->container['milestone'];
    }

    /**
     * Sets milestone
     *
     * @param \Efsa\Client\Gitea\Model\Milestone|null $milestone milestone
     *
     * @return self
     */
    public function setMilestone($milestone)
    {
        $this->container['milestone'] = $milestone;

        return $this;
    }

    /**
     * Gets newRef
     *
     * @return string|null
     */
    public function getNewRef()
    {
        return $this->container['newRef'];
    }

    /**
     * Sets newRef
     *
     * @param string|null $newRef newRef
     *
     * @return self
     */
    public function setNewRef($newRef)
    {
        $this->container['newRef'] = $newRef;

        return $this;
    }

    /**
     * Gets newTitle
     *
     * @return string|null
     */
    public function getNewTitle()
    {
        return $this->container['newTitle'];
    }

    /**
     * Sets newTitle
     *
     * @param string|null $newTitle newTitle
     *
     * @return self
     */
    public function setNewTitle($newTitle)
    {
        $this->container['newTitle'] = $newTitle;

        return $this;
    }

    /**
     * Gets oldMilestone
     *
     * @return \Efsa\Client\Gitea\Model\Milestone|null
     */
    public function getOldMilestone()
    {
        return $this->container['oldMilestone'];
    }

    /**
     * Sets oldMilestone
     *
     * @param \Efsa\Client\Gitea\Model\Milestone|null $oldMilestone oldMilestone
     *
     * @return self
     */
    public function setOldMilestone($oldMilestone)
    {
        $this->container['oldMilestone'] = $oldMilestone;

        return $this;
    }

    /**
     * Gets oldProjectId
     *
     * @return int|null
     */
    public function getOldProjectId()
    {
        return $this->container['oldProjectId'];
    }

    /**
     * Sets oldProjectId
     *
     * @param int|null $oldProjectId oldProjectId
     *
     * @return self
     */
    public function setOldProjectId($oldProjectId)
    {
        $this->container['oldProjectId'] = $oldProjectId;

        return $this;
    }

    /**
     * Gets oldRef
     *
     * @return string|null
     */
    public function getOldRef()
    {
        return $this->container['oldRef'];
    }

    /**
     * Sets oldRef
     *
     * @param string|null $oldRef oldRef
     *
     * @return self
     */
    public function setOldRef($oldRef)
    {
        $this->container['oldRef'] = $oldRef;

        return $this;
    }

    /**
     * Gets oldTitle
     *
     * @return string|null
     */
    public function getOldTitle()
    {
        return $this->container['oldTitle'];
    }

    /**
     * Sets oldTitle
     *
     * @param string|null $oldTitle oldTitle
     *
     * @return self
     */
    public function setOldTitle($oldTitle)
    {
        $this->container['oldTitle'] = $oldTitle;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param int|null $projectId projectId
     *
     * @return self
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets pullRequestUrl
     *
     * @return string|null
     */
    public function getPullRequestUrl()
    {
        return $this->container['pullRequestUrl'];
    }

    /**
     * Sets pullRequestUrl
     *
     * @param string|null $pullRequestUrl pullRequestUrl
     *
     * @return self
     */
    public function setPullRequestUrl($pullRequestUrl)
    {
        $this->container['pullRequestUrl'] = $pullRequestUrl;

        return $this;
    }

    /**
     * Gets refAction
     *
     * @return string|null
     */
    public function getRefAction()
    {
        return $this->container['refAction'];
    }

    /**
     * Sets refAction
     *
     * @param string|null $refAction refAction
     *
     * @return self
     */
    public function setRefAction($refAction)
    {
        $this->container['refAction'] = $refAction;

        return $this;
    }

    /**
     * Gets refComment
     *
     * @return \Efsa\Client\Gitea\Model\Comment|null
     */
    public function getRefComment()
    {
        return $this->container['refComment'];
    }

    /**
     * Sets refComment
     *
     * @param \Efsa\Client\Gitea\Model\Comment|null $refComment refComment
     *
     * @return self
     */
    public function setRefComment($refComment)
    {
        $this->container['refComment'] = $refComment;

        return $this;
    }

    /**
     * Gets refCommitSha
     *
     * @return string|null
     */
    public function getRefCommitSha()
    {
        return $this->container['refCommitSha'];
    }

    /**
     * Sets refCommitSha
     *
     * @param string|null $refCommitSha commit SHA where issue/PR was referenced
     *
     * @return self
     */
    public function setRefCommitSha($refCommitSha)
    {
        $this->container['refCommitSha'] = $refCommitSha;

        return $this;
    }

    /**
     * Gets refIssue
     *
     * @return \Efsa\Client\Gitea\Model\Issue|null
     */
    public function getRefIssue()
    {
        return $this->container['refIssue'];
    }

    /**
     * Sets refIssue
     *
     * @param \Efsa\Client\Gitea\Model\Issue|null $refIssue refIssue
     *
     * @return self
     */
    public function setRefIssue($refIssue)
    {
        $this->container['refIssue'] = $refIssue;

        return $this;
    }

    /**
     * Gets removedAssignee
     *
     * @return bool|null
     */
    public function getRemovedAssignee()
    {
        return $this->container['removedAssignee'];
    }

    /**
     * Sets removedAssignee
     *
     * @param bool|null $removedAssignee whether the assignees were removed or added
     *
     * @return self
     */
    public function setRemovedAssignee($removedAssignee)
    {
        $this->container['removedAssignee'] = $removedAssignee;

        return $this;
    }

    /**
     * Gets resolveDoer
     *
     * @return \Efsa\Client\Gitea\Model\User|null
     */
    public function getResolveDoer()
    {
        return $this->container['resolveDoer'];
    }

    /**
     * Sets resolveDoer
     *
     * @param \Efsa\Client\Gitea\Model\User|null $resolveDoer resolveDoer
     *
     * @return self
     */
    public function setResolveDoer($resolveDoer)
    {
        $this->container['resolveDoer'] = $resolveDoer;

        return $this;
    }

    /**
     * Gets reviewId
     *
     * @return int|null
     */
    public function getReviewId()
    {
        return $this->container['reviewId'];
    }

    /**
     * Sets reviewId
     *
     * @param int|null $reviewId reviewId
     *
     * @return self
     */
    public function setReviewId($reviewId)
    {
        $this->container['reviewId'] = $reviewId;

        return $this;
    }

    /**
     * Gets trackedTime
     *
     * @return \Efsa\Client\Gitea\Model\TrackedTime|null
     */
    public function getTrackedTime()
    {
        return $this->container['trackedTime'];
    }

    /**
     * Sets trackedTime
     *
     * @param \Efsa\Client\Gitea\Model\TrackedTime|null $trackedTime trackedTime
     *
     * @return self
     */
    public function setTrackedTime($trackedTime)
    {
        $this->container['trackedTime'] = $trackedTime;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Efsa\Client\Gitea\Model\User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Efsa\Client\Gitea\Model\User|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


