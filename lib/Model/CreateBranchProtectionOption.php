<?php
/**
 * CreateBranchProtectionOption
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Gitea\Model;

use \ArrayAccess;
use \Efsa\Client\Gitea\ObjectSerializer;

/**
 * CreateBranchProtectionOption Class Doc Comment
 *
 * @category Class
 * @description CreateBranchProtectionOption options for creating a branch protection
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CreateBranchProtectionOption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateBranchProtectionOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'approvalsWhitelistTeams' => 'string[]',
        'approvalsWhitelistUsername' => 'string[]',
        'blockOnOfficialReviewRequests' => 'bool',
        'blockOnOutdatedBranch' => 'bool',
        'blockOnRejectedReviews' => 'bool',
        'branchName' => 'string',
        'dismissStaleApprovals' => 'bool',
        'enableApprovalsWhitelist' => 'bool',
        'enableMergeWhitelist' => 'bool',
        'enablePush' => 'bool',
        'enablePushWhitelist' => 'bool',
        'enableStatusCheck' => 'bool',
        'mergeWhitelistTeams' => 'string[]',
        'mergeWhitelistUsernames' => 'string[]',
        'protectedFilePatterns' => 'string',
        'pushWhitelistDeployKeys' => 'bool',
        'pushWhitelistTeams' => 'string[]',
        'pushWhitelistUsernames' => 'string[]',
        'requireSignedCommits' => 'bool',
        'requiredApprovals' => 'int',
        'statusCheckContexts' => 'string[]',
        'unprotectedFilePatterns' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'approvalsWhitelistTeams' => null,
        'approvalsWhitelistUsername' => null,
        'blockOnOfficialReviewRequests' => null,
        'blockOnOutdatedBranch' => null,
        'blockOnRejectedReviews' => null,
        'branchName' => null,
        'dismissStaleApprovals' => null,
        'enableApprovalsWhitelist' => null,
        'enableMergeWhitelist' => null,
        'enablePush' => null,
        'enablePushWhitelist' => null,
        'enableStatusCheck' => null,
        'mergeWhitelistTeams' => null,
        'mergeWhitelistUsernames' => null,
        'protectedFilePatterns' => null,
        'pushWhitelistDeployKeys' => null,
        'pushWhitelistTeams' => null,
        'pushWhitelistUsernames' => null,
        'requireSignedCommits' => null,
        'requiredApprovals' => 'int64',
        'statusCheckContexts' => null,
        'unprotectedFilePatterns' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'approvalsWhitelistTeams' => 'approvals_whitelist_teams',
        'approvalsWhitelistUsername' => 'approvals_whitelist_username',
        'blockOnOfficialReviewRequests' => 'block_on_official_review_requests',
        'blockOnOutdatedBranch' => 'block_on_outdated_branch',
        'blockOnRejectedReviews' => 'block_on_rejected_reviews',
        'branchName' => 'branch_name',
        'dismissStaleApprovals' => 'dismiss_stale_approvals',
        'enableApprovalsWhitelist' => 'enable_approvals_whitelist',
        'enableMergeWhitelist' => 'enable_merge_whitelist',
        'enablePush' => 'enable_push',
        'enablePushWhitelist' => 'enable_push_whitelist',
        'enableStatusCheck' => 'enable_status_check',
        'mergeWhitelistTeams' => 'merge_whitelist_teams',
        'mergeWhitelistUsernames' => 'merge_whitelist_usernames',
        'protectedFilePatterns' => 'protected_file_patterns',
        'pushWhitelistDeployKeys' => 'push_whitelist_deploy_keys',
        'pushWhitelistTeams' => 'push_whitelist_teams',
        'pushWhitelistUsernames' => 'push_whitelist_usernames',
        'requireSignedCommits' => 'require_signed_commits',
        'requiredApprovals' => 'required_approvals',
        'statusCheckContexts' => 'status_check_contexts',
        'unprotectedFilePatterns' => 'unprotected_file_patterns'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'approvalsWhitelistTeams' => 'setApprovalsWhitelistTeams',
        'approvalsWhitelistUsername' => 'setApprovalsWhitelistUsername',
        'blockOnOfficialReviewRequests' => 'setBlockOnOfficialReviewRequests',
        'blockOnOutdatedBranch' => 'setBlockOnOutdatedBranch',
        'blockOnRejectedReviews' => 'setBlockOnRejectedReviews',
        'branchName' => 'setBranchName',
        'dismissStaleApprovals' => 'setDismissStaleApprovals',
        'enableApprovalsWhitelist' => 'setEnableApprovalsWhitelist',
        'enableMergeWhitelist' => 'setEnableMergeWhitelist',
        'enablePush' => 'setEnablePush',
        'enablePushWhitelist' => 'setEnablePushWhitelist',
        'enableStatusCheck' => 'setEnableStatusCheck',
        'mergeWhitelistTeams' => 'setMergeWhitelistTeams',
        'mergeWhitelistUsernames' => 'setMergeWhitelistUsernames',
        'protectedFilePatterns' => 'setProtectedFilePatterns',
        'pushWhitelistDeployKeys' => 'setPushWhitelistDeployKeys',
        'pushWhitelistTeams' => 'setPushWhitelistTeams',
        'pushWhitelistUsernames' => 'setPushWhitelistUsernames',
        'requireSignedCommits' => 'setRequireSignedCommits',
        'requiredApprovals' => 'setRequiredApprovals',
        'statusCheckContexts' => 'setStatusCheckContexts',
        'unprotectedFilePatterns' => 'setUnprotectedFilePatterns'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'approvalsWhitelistTeams' => 'getApprovalsWhitelistTeams',
        'approvalsWhitelistUsername' => 'getApprovalsWhitelistUsername',
        'blockOnOfficialReviewRequests' => 'getBlockOnOfficialReviewRequests',
        'blockOnOutdatedBranch' => 'getBlockOnOutdatedBranch',
        'blockOnRejectedReviews' => 'getBlockOnRejectedReviews',
        'branchName' => 'getBranchName',
        'dismissStaleApprovals' => 'getDismissStaleApprovals',
        'enableApprovalsWhitelist' => 'getEnableApprovalsWhitelist',
        'enableMergeWhitelist' => 'getEnableMergeWhitelist',
        'enablePush' => 'getEnablePush',
        'enablePushWhitelist' => 'getEnablePushWhitelist',
        'enableStatusCheck' => 'getEnableStatusCheck',
        'mergeWhitelistTeams' => 'getMergeWhitelistTeams',
        'mergeWhitelistUsernames' => 'getMergeWhitelistUsernames',
        'protectedFilePatterns' => 'getProtectedFilePatterns',
        'pushWhitelistDeployKeys' => 'getPushWhitelistDeployKeys',
        'pushWhitelistTeams' => 'getPushWhitelistTeams',
        'pushWhitelistUsernames' => 'getPushWhitelistUsernames',
        'requireSignedCommits' => 'getRequireSignedCommits',
        'requiredApprovals' => 'getRequiredApprovals',
        'statusCheckContexts' => 'getStatusCheckContexts',
        'unprotectedFilePatterns' => 'getUnprotectedFilePatterns'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['approvalsWhitelistTeams'] = $data['approvalsWhitelistTeams'] ?? null;
        $this->container['approvalsWhitelistUsername'] = $data['approvalsWhitelistUsername'] ?? null;
        $this->container['blockOnOfficialReviewRequests'] = $data['blockOnOfficialReviewRequests'] ?? null;
        $this->container['blockOnOutdatedBranch'] = $data['blockOnOutdatedBranch'] ?? null;
        $this->container['blockOnRejectedReviews'] = $data['blockOnRejectedReviews'] ?? null;
        $this->container['branchName'] = $data['branchName'] ?? null;
        $this->container['dismissStaleApprovals'] = $data['dismissStaleApprovals'] ?? null;
        $this->container['enableApprovalsWhitelist'] = $data['enableApprovalsWhitelist'] ?? null;
        $this->container['enableMergeWhitelist'] = $data['enableMergeWhitelist'] ?? null;
        $this->container['enablePush'] = $data['enablePush'] ?? null;
        $this->container['enablePushWhitelist'] = $data['enablePushWhitelist'] ?? null;
        $this->container['enableStatusCheck'] = $data['enableStatusCheck'] ?? null;
        $this->container['mergeWhitelistTeams'] = $data['mergeWhitelistTeams'] ?? null;
        $this->container['mergeWhitelistUsernames'] = $data['mergeWhitelistUsernames'] ?? null;
        $this->container['protectedFilePatterns'] = $data['protectedFilePatterns'] ?? null;
        $this->container['pushWhitelistDeployKeys'] = $data['pushWhitelistDeployKeys'] ?? null;
        $this->container['pushWhitelistTeams'] = $data['pushWhitelistTeams'] ?? null;
        $this->container['pushWhitelistUsernames'] = $data['pushWhitelistUsernames'] ?? null;
        $this->container['requireSignedCommits'] = $data['requireSignedCommits'] ?? null;
        $this->container['requiredApprovals'] = $data['requiredApprovals'] ?? null;
        $this->container['statusCheckContexts'] = $data['statusCheckContexts'] ?? null;
        $this->container['unprotectedFilePatterns'] = $data['unprotectedFilePatterns'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets approvalsWhitelistTeams
     *
     * @return string[]|null
     */
    public function getApprovalsWhitelistTeams()
    {
        return $this->container['approvalsWhitelistTeams'];
    }

    /**
     * Sets approvalsWhitelistTeams
     *
     * @param string[]|null $approvalsWhitelistTeams approvalsWhitelistTeams
     *
     * @return self
     */
    public function setApprovalsWhitelistTeams($approvalsWhitelistTeams)
    {
        $this->container['approvalsWhitelistTeams'] = $approvalsWhitelistTeams;

        return $this;
    }

    /**
     * Gets approvalsWhitelistUsername
     *
     * @return string[]|null
     */
    public function getApprovalsWhitelistUsername()
    {
        return $this->container['approvalsWhitelistUsername'];
    }

    /**
     * Sets approvalsWhitelistUsername
     *
     * @param string[]|null $approvalsWhitelistUsername approvalsWhitelistUsername
     *
     * @return self
     */
    public function setApprovalsWhitelistUsername($approvalsWhitelistUsername)
    {
        $this->container['approvalsWhitelistUsername'] = $approvalsWhitelistUsername;

        return $this;
    }

    /**
     * Gets blockOnOfficialReviewRequests
     *
     * @return bool|null
     */
    public function getBlockOnOfficialReviewRequests()
    {
        return $this->container['blockOnOfficialReviewRequests'];
    }

    /**
     * Sets blockOnOfficialReviewRequests
     *
     * @param bool|null $blockOnOfficialReviewRequests blockOnOfficialReviewRequests
     *
     * @return self
     */
    public function setBlockOnOfficialReviewRequests($blockOnOfficialReviewRequests)
    {
        $this->container['blockOnOfficialReviewRequests'] = $blockOnOfficialReviewRequests;

        return $this;
    }

    /**
     * Gets blockOnOutdatedBranch
     *
     * @return bool|null
     */
    public function getBlockOnOutdatedBranch()
    {
        return $this->container['blockOnOutdatedBranch'];
    }

    /**
     * Sets blockOnOutdatedBranch
     *
     * @param bool|null $blockOnOutdatedBranch blockOnOutdatedBranch
     *
     * @return self
     */
    public function setBlockOnOutdatedBranch($blockOnOutdatedBranch)
    {
        $this->container['blockOnOutdatedBranch'] = $blockOnOutdatedBranch;

        return $this;
    }

    /**
     * Gets blockOnRejectedReviews
     *
     * @return bool|null
     */
    public function getBlockOnRejectedReviews()
    {
        return $this->container['blockOnRejectedReviews'];
    }

    /**
     * Sets blockOnRejectedReviews
     *
     * @param bool|null $blockOnRejectedReviews blockOnRejectedReviews
     *
     * @return self
     */
    public function setBlockOnRejectedReviews($blockOnRejectedReviews)
    {
        $this->container['blockOnRejectedReviews'] = $blockOnRejectedReviews;

        return $this;
    }

    /**
     * Gets branchName
     *
     * @return string|null
     */
    public function getBranchName()
    {
        return $this->container['branchName'];
    }

    /**
     * Sets branchName
     *
     * @param string|null $branchName branchName
     *
     * @return self
     */
    public function setBranchName($branchName)
    {
        $this->container['branchName'] = $branchName;

        return $this;
    }

    /**
     * Gets dismissStaleApprovals
     *
     * @return bool|null
     */
    public function getDismissStaleApprovals()
    {
        return $this->container['dismissStaleApprovals'];
    }

    /**
     * Sets dismissStaleApprovals
     *
     * @param bool|null $dismissStaleApprovals dismissStaleApprovals
     *
     * @return self
     */
    public function setDismissStaleApprovals($dismissStaleApprovals)
    {
        $this->container['dismissStaleApprovals'] = $dismissStaleApprovals;

        return $this;
    }

    /**
     * Gets enableApprovalsWhitelist
     *
     * @return bool|null
     */
    public function getEnableApprovalsWhitelist()
    {
        return $this->container['enableApprovalsWhitelist'];
    }

    /**
     * Sets enableApprovalsWhitelist
     *
     * @param bool|null $enableApprovalsWhitelist enableApprovalsWhitelist
     *
     * @return self
     */
    public function setEnableApprovalsWhitelist($enableApprovalsWhitelist)
    {
        $this->container['enableApprovalsWhitelist'] = $enableApprovalsWhitelist;

        return $this;
    }

    /**
     * Gets enableMergeWhitelist
     *
     * @return bool|null
     */
    public function getEnableMergeWhitelist()
    {
        return $this->container['enableMergeWhitelist'];
    }

    /**
     * Sets enableMergeWhitelist
     *
     * @param bool|null $enableMergeWhitelist enableMergeWhitelist
     *
     * @return self
     */
    public function setEnableMergeWhitelist($enableMergeWhitelist)
    {
        $this->container['enableMergeWhitelist'] = $enableMergeWhitelist;

        return $this;
    }

    /**
     * Gets enablePush
     *
     * @return bool|null
     */
    public function getEnablePush()
    {
        return $this->container['enablePush'];
    }

    /**
     * Sets enablePush
     *
     * @param bool|null $enablePush enablePush
     *
     * @return self
     */
    public function setEnablePush($enablePush)
    {
        $this->container['enablePush'] = $enablePush;

        return $this;
    }

    /**
     * Gets enablePushWhitelist
     *
     * @return bool|null
     */
    public function getEnablePushWhitelist()
    {
        return $this->container['enablePushWhitelist'];
    }

    /**
     * Sets enablePushWhitelist
     *
     * @param bool|null $enablePushWhitelist enablePushWhitelist
     *
     * @return self
     */
    public function setEnablePushWhitelist($enablePushWhitelist)
    {
        $this->container['enablePushWhitelist'] = $enablePushWhitelist;

        return $this;
    }

    /**
     * Gets enableStatusCheck
     *
     * @return bool|null
     */
    public function getEnableStatusCheck()
    {
        return $this->container['enableStatusCheck'];
    }

    /**
     * Sets enableStatusCheck
     *
     * @param bool|null $enableStatusCheck enableStatusCheck
     *
     * @return self
     */
    public function setEnableStatusCheck($enableStatusCheck)
    {
        $this->container['enableStatusCheck'] = $enableStatusCheck;

        return $this;
    }

    /**
     * Gets mergeWhitelistTeams
     *
     * @return string[]|null
     */
    public function getMergeWhitelistTeams()
    {
        return $this->container['mergeWhitelistTeams'];
    }

    /**
     * Sets mergeWhitelistTeams
     *
     * @param string[]|null $mergeWhitelistTeams mergeWhitelistTeams
     *
     * @return self
     */
    public function setMergeWhitelistTeams($mergeWhitelistTeams)
    {
        $this->container['mergeWhitelistTeams'] = $mergeWhitelistTeams;

        return $this;
    }

    /**
     * Gets mergeWhitelistUsernames
     *
     * @return string[]|null
     */
    public function getMergeWhitelistUsernames()
    {
        return $this->container['mergeWhitelistUsernames'];
    }

    /**
     * Sets mergeWhitelistUsernames
     *
     * @param string[]|null $mergeWhitelistUsernames mergeWhitelistUsernames
     *
     * @return self
     */
    public function setMergeWhitelistUsernames($mergeWhitelistUsernames)
    {
        $this->container['mergeWhitelistUsernames'] = $mergeWhitelistUsernames;

        return $this;
    }

    /**
     * Gets protectedFilePatterns
     *
     * @return string|null
     */
    public function getProtectedFilePatterns()
    {
        return $this->container['protectedFilePatterns'];
    }

    /**
     * Sets protectedFilePatterns
     *
     * @param string|null $protectedFilePatterns protectedFilePatterns
     *
     * @return self
     */
    public function setProtectedFilePatterns($protectedFilePatterns)
    {
        $this->container['protectedFilePatterns'] = $protectedFilePatterns;

        return $this;
    }

    /**
     * Gets pushWhitelistDeployKeys
     *
     * @return bool|null
     */
    public function getPushWhitelistDeployKeys()
    {
        return $this->container['pushWhitelistDeployKeys'];
    }

    /**
     * Sets pushWhitelistDeployKeys
     *
     * @param bool|null $pushWhitelistDeployKeys pushWhitelistDeployKeys
     *
     * @return self
     */
    public function setPushWhitelistDeployKeys($pushWhitelistDeployKeys)
    {
        $this->container['pushWhitelistDeployKeys'] = $pushWhitelistDeployKeys;

        return $this;
    }

    /**
     * Gets pushWhitelistTeams
     *
     * @return string[]|null
     */
    public function getPushWhitelistTeams()
    {
        return $this->container['pushWhitelistTeams'];
    }

    /**
     * Sets pushWhitelistTeams
     *
     * @param string[]|null $pushWhitelistTeams pushWhitelistTeams
     *
     * @return self
     */
    public function setPushWhitelistTeams($pushWhitelistTeams)
    {
        $this->container['pushWhitelistTeams'] = $pushWhitelistTeams;

        return $this;
    }

    /**
     * Gets pushWhitelistUsernames
     *
     * @return string[]|null
     */
    public function getPushWhitelistUsernames()
    {
        return $this->container['pushWhitelistUsernames'];
    }

    /**
     * Sets pushWhitelistUsernames
     *
     * @param string[]|null $pushWhitelistUsernames pushWhitelistUsernames
     *
     * @return self
     */
    public function setPushWhitelistUsernames($pushWhitelistUsernames)
    {
        $this->container['pushWhitelistUsernames'] = $pushWhitelistUsernames;

        return $this;
    }

    /**
     * Gets requireSignedCommits
     *
     * @return bool|null
     */
    public function getRequireSignedCommits()
    {
        return $this->container['requireSignedCommits'];
    }

    /**
     * Sets requireSignedCommits
     *
     * @param bool|null $requireSignedCommits requireSignedCommits
     *
     * @return self
     */
    public function setRequireSignedCommits($requireSignedCommits)
    {
        $this->container['requireSignedCommits'] = $requireSignedCommits;

        return $this;
    }

    /**
     * Gets requiredApprovals
     *
     * @return int|null
     */
    public function getRequiredApprovals()
    {
        return $this->container['requiredApprovals'];
    }

    /**
     * Sets requiredApprovals
     *
     * @param int|null $requiredApprovals requiredApprovals
     *
     * @return self
     */
    public function setRequiredApprovals($requiredApprovals)
    {
        $this->container['requiredApprovals'] = $requiredApprovals;

        return $this;
    }

    /**
     * Gets statusCheckContexts
     *
     * @return string[]|null
     */
    public function getStatusCheckContexts()
    {
        return $this->container['statusCheckContexts'];
    }

    /**
     * Sets statusCheckContexts
     *
     * @param string[]|null $statusCheckContexts statusCheckContexts
     *
     * @return self
     */
    public function setStatusCheckContexts($statusCheckContexts)
    {
        $this->container['statusCheckContexts'] = $statusCheckContexts;

        return $this;
    }

    /**
     * Gets unprotectedFilePatterns
     *
     * @return string|null
     */
    public function getUnprotectedFilePatterns()
    {
        return $this->container['unprotectedFilePatterns'];
    }

    /**
     * Sets unprotectedFilePatterns
     *
     * @param string|null $unprotectedFilePatterns unprotectedFilePatterns
     *
     * @return self
     */
    public function setUnprotectedFilePatterns($unprotectedFilePatterns)
    {
        $this->container['unprotectedFilePatterns'] = $unprotectedFilePatterns;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


