<?php
/**
 * MigrateRepoForm
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Gitea\Model;

use \ArrayAccess;
use \Efsa\Client\Gitea\ObjectSerializer;

/**
 * MigrateRepoForm Class Doc Comment
 *
 * @category Class
 * @description MigrateRepoForm form for migrating repository this is used to interact with web ui
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MigrateRepoForm implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MigrateRepoForm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auth_password' => 'string',
        'auth_token' => 'string',
        'auth_username' => 'string',
        'clone_addr' => 'string',
        'description' => 'string',
        'issues' => 'bool',
        'labels' => 'bool',
        'lfs' => 'bool',
        'lfs_endpoint' => 'string',
        'milestones' => 'bool',
        'mirror' => 'bool',
        'mirror_interval' => 'string',
        'private' => 'bool',
        'pull_requests' => 'bool',
        'releases' => 'bool',
        'repo_name' => 'string',
        'service' => 'int',
        'uid' => 'int',
        'wiki' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'auth_password' => null,
        'auth_token' => null,
        'auth_username' => null,
        'clone_addr' => null,
        'description' => null,
        'issues' => null,
        'labels' => null,
        'lfs' => null,
        'lfs_endpoint' => null,
        'milestones' => null,
        'mirror' => null,
        'mirror_interval' => null,
        'private' => null,
        'pull_requests' => null,
        'releases' => null,
        'repo_name' => null,
        'service' => 'int64',
        'uid' => 'int64',
        'wiki' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auth_password' => 'auth_password',
        'auth_token' => 'auth_token',
        'auth_username' => 'auth_username',
        'clone_addr' => 'clone_addr',
        'description' => 'description',
        'issues' => 'issues',
        'labels' => 'labels',
        'lfs' => 'lfs',
        'lfs_endpoint' => 'lfs_endpoint',
        'milestones' => 'milestones',
        'mirror' => 'mirror',
        'mirror_interval' => 'mirror_interval',
        'private' => 'private',
        'pull_requests' => 'pull_requests',
        'releases' => 'releases',
        'repo_name' => 'repo_name',
        'service' => 'service',
        'uid' => 'uid',
        'wiki' => 'wiki'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auth_password' => 'setAuthPassword',
        'auth_token' => 'setAuthToken',
        'auth_username' => 'setAuthUsername',
        'clone_addr' => 'setCloneAddr',
        'description' => 'setDescription',
        'issues' => 'setIssues',
        'labels' => 'setLabels',
        'lfs' => 'setLfs',
        'lfs_endpoint' => 'setLfsEndpoint',
        'milestones' => 'setMilestones',
        'mirror' => 'setMirror',
        'mirror_interval' => 'setMirrorInterval',
        'private' => 'setPrivate',
        'pull_requests' => 'setPullRequests',
        'releases' => 'setReleases',
        'repo_name' => 'setRepoName',
        'service' => 'setService',
        'uid' => 'setUid',
        'wiki' => 'setWiki'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auth_password' => 'getAuthPassword',
        'auth_token' => 'getAuthToken',
        'auth_username' => 'getAuthUsername',
        'clone_addr' => 'getCloneAddr',
        'description' => 'getDescription',
        'issues' => 'getIssues',
        'labels' => 'getLabels',
        'lfs' => 'getLfs',
        'lfs_endpoint' => 'getLfsEndpoint',
        'milestones' => 'getMilestones',
        'mirror' => 'getMirror',
        'mirror_interval' => 'getMirrorInterval',
        'private' => 'getPrivate',
        'pull_requests' => 'getPullRequests',
        'releases' => 'getReleases',
        'repo_name' => 'getRepoName',
        'service' => 'getService',
        'uid' => 'getUid',
        'wiki' => 'getWiki'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auth_password'] = $data['auth_password'] ?? null;
        $this->container['auth_token'] = $data['auth_token'] ?? null;
        $this->container['auth_username'] = $data['auth_username'] ?? null;
        $this->container['clone_addr'] = $data['clone_addr'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['issues'] = $data['issues'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['lfs'] = $data['lfs'] ?? null;
        $this->container['lfs_endpoint'] = $data['lfs_endpoint'] ?? null;
        $this->container['milestones'] = $data['milestones'] ?? null;
        $this->container['mirror'] = $data['mirror'] ?? null;
        $this->container['mirror_interval'] = $data['mirror_interval'] ?? null;
        $this->container['private'] = $data['private'] ?? null;
        $this->container['pull_requests'] = $data['pull_requests'] ?? null;
        $this->container['releases'] = $data['releases'] ?? null;
        $this->container['repo_name'] = $data['repo_name'] ?? null;
        $this->container['service'] = $data['service'] ?? null;
        $this->container['uid'] = $data['uid'] ?? null;
        $this->container['wiki'] = $data['wiki'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['clone_addr'] === null) {
            $invalidProperties[] = "'clone_addr' can't be null";
        }
        if ($this->container['repo_name'] === null) {
            $invalidProperties[] = "'repo_name' can't be null";
        }
        if ($this->container['uid'] === null) {
            $invalidProperties[] = "'uid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auth_password
     *
     * @return string|null
     */
    public function getAuthPassword()
    {
        return $this->container['auth_password'];
    }

    /**
     * Sets auth_password
     *
     * @param string|null $auth_password auth_password
     *
     * @return self
     */
    public function setAuthPassword($auth_password)
    {
        $this->container['auth_password'] = $auth_password;

        return $this;
    }

    /**
     * Gets auth_token
     *
     * @return string|null
     */
    public function getAuthToken()
    {
        return $this->container['auth_token'];
    }

    /**
     * Sets auth_token
     *
     * @param string|null $auth_token auth_token
     *
     * @return self
     */
    public function setAuthToken($auth_token)
    {
        $this->container['auth_token'] = $auth_token;

        return $this;
    }

    /**
     * Gets auth_username
     *
     * @return string|null
     */
    public function getAuthUsername()
    {
        return $this->container['auth_username'];
    }

    /**
     * Sets auth_username
     *
     * @param string|null $auth_username auth_username
     *
     * @return self
     */
    public function setAuthUsername($auth_username)
    {
        $this->container['auth_username'] = $auth_username;

        return $this;
    }

    /**
     * Gets clone_addr
     *
     * @return string
     */
    public function getCloneAddr()
    {
        return $this->container['clone_addr'];
    }

    /**
     * Sets clone_addr
     *
     * @param string $clone_addr clone_addr
     *
     * @return self
     */
    public function setCloneAddr($clone_addr)
    {
        $this->container['clone_addr'] = $clone_addr;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets issues
     *
     * @return bool|null
     */
    public function getIssues()
    {
        return $this->container['issues'];
    }

    /**
     * Sets issues
     *
     * @param bool|null $issues issues
     *
     * @return self
     */
    public function setIssues($issues)
    {
        $this->container['issues'] = $issues;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return bool|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param bool|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets lfs
     *
     * @return bool|null
     */
    public function getLfs()
    {
        return $this->container['lfs'];
    }

    /**
     * Sets lfs
     *
     * @param bool|null $lfs lfs
     *
     * @return self
     */
    public function setLfs($lfs)
    {
        $this->container['lfs'] = $lfs;

        return $this;
    }

    /**
     * Gets lfs_endpoint
     *
     * @return string|null
     */
    public function getLfsEndpoint()
    {
        return $this->container['lfs_endpoint'];
    }

    /**
     * Sets lfs_endpoint
     *
     * @param string|null $lfs_endpoint lfs_endpoint
     *
     * @return self
     */
    public function setLfsEndpoint($lfs_endpoint)
    {
        $this->container['lfs_endpoint'] = $lfs_endpoint;

        return $this;
    }

    /**
     * Gets milestones
     *
     * @return bool|null
     */
    public function getMilestones()
    {
        return $this->container['milestones'];
    }

    /**
     * Sets milestones
     *
     * @param bool|null $milestones milestones
     *
     * @return self
     */
    public function setMilestones($milestones)
    {
        $this->container['milestones'] = $milestones;

        return $this;
    }

    /**
     * Gets mirror
     *
     * @return bool|null
     */
    public function getMirror()
    {
        return $this->container['mirror'];
    }

    /**
     * Sets mirror
     *
     * @param bool|null $mirror mirror
     *
     * @return self
     */
    public function setMirror($mirror)
    {
        $this->container['mirror'] = $mirror;

        return $this;
    }

    /**
     * Gets mirror_interval
     *
     * @return string|null
     */
    public function getMirrorInterval()
    {
        return $this->container['mirror_interval'];
    }

    /**
     * Sets mirror_interval
     *
     * @param string|null $mirror_interval mirror_interval
     *
     * @return self
     */
    public function setMirrorInterval($mirror_interval)
    {
        $this->container['mirror_interval'] = $mirror_interval;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool|null
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool|null $private private
     *
     * @return self
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets pull_requests
     *
     * @return bool|null
     */
    public function getPullRequests()
    {
        return $this->container['pull_requests'];
    }

    /**
     * Sets pull_requests
     *
     * @param bool|null $pull_requests pull_requests
     *
     * @return self
     */
    public function setPullRequests($pull_requests)
    {
        $this->container['pull_requests'] = $pull_requests;

        return $this;
    }

    /**
     * Gets releases
     *
     * @return bool|null
     */
    public function getReleases()
    {
        return $this->container['releases'];
    }

    /**
     * Sets releases
     *
     * @param bool|null $releases releases
     *
     * @return self
     */
    public function setReleases($releases)
    {
        $this->container['releases'] = $releases;

        return $this;
    }

    /**
     * Gets repo_name
     *
     * @return string
     */
    public function getRepoName()
    {
        return $this->container['repo_name'];
    }

    /**
     * Sets repo_name
     *
     * @param string $repo_name repo_name
     *
     * @return self
     */
    public function setRepoName($repo_name)
    {
        $this->container['repo_name'] = $repo_name;

        return $this;
    }

    /**
     * Gets service
     *
     * @return int|null
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param int|null $service GitServiceType represents a git service
     *
     * @return self
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return int
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param int $uid uid
     *
     * @return self
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets wiki
     *
     * @return bool|null
     */
    public function getWiki()
    {
        return $this->container['wiki'];
    }

    /**
     * Sets wiki
     *
     * @param bool|null $wiki wiki
     *
     * @return self
     */
    public function setWiki($wiki)
    {
        $this->container['wiki'] = $wiki;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


