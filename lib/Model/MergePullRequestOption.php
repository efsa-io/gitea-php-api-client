<?php
/**
 * MergePullRequestOption
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Model;

use \ArrayAccess;
use \Efsa\Client\ObjectSerializer;

/**
 * MergePullRequestOption Class Doc Comment
 *
 * @category Class
 * @description MergePullRequestForm form for merging Pull Request
 * @package  Efsa\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MergePullRequestOption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MergePullRequestOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'do' => 'string',
        'merge_commit_id' => 'string',
        'merge_message_field' => 'string',
        'merge_title_field' => 'string',
        'delete_branch_after_merge' => 'bool',
        'force_merge' => 'bool',
        'head_commit_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'do' => null,
        'merge_commit_id' => null,
        'merge_message_field' => null,
        'merge_title_field' => null,
        'delete_branch_after_merge' => null,
        'force_merge' => null,
        'head_commit_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'do' => 'Do',
        'merge_commit_id' => 'MergeCommitID',
        'merge_message_field' => 'MergeMessageField',
        'merge_title_field' => 'MergeTitleField',
        'delete_branch_after_merge' => 'delete_branch_after_merge',
        'force_merge' => 'force_merge',
        'head_commit_id' => 'head_commit_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'do' => 'setDo',
        'merge_commit_id' => 'setMergeCommitId',
        'merge_message_field' => 'setMergeMessageField',
        'merge_title_field' => 'setMergeTitleField',
        'delete_branch_after_merge' => 'setDeleteBranchAfterMerge',
        'force_merge' => 'setForceMerge',
        'head_commit_id' => 'setHeadCommitId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'do' => 'getDo',
        'merge_commit_id' => 'getMergeCommitId',
        'merge_message_field' => 'getMergeMessageField',
        'merge_title_field' => 'getMergeTitleField',
        'delete_branch_after_merge' => 'getDeleteBranchAfterMerge',
        'force_merge' => 'getForceMerge',
        'head_commit_id' => 'getHeadCommitId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MODEL_DO_MERGE = 'merge';
    const MODEL_DO_REBASE = 'rebase';
    const MODEL_DO_REBASE_MERGE = 'rebase-merge';
    const MODEL_DO_SQUASH = 'squash';
    const MODEL_DO_MANUALLY_MERGED = 'manually-merged';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDoAllowableValues()
    {
        return [
            self::MODEL_DO_MERGE,
            self::MODEL_DO_REBASE,
            self::MODEL_DO_REBASE_MERGE,
            self::MODEL_DO_SQUASH,
            self::MODEL_DO_MANUALLY_MERGED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['do'] = $data['do'] ?? null;
        $this->container['merge_commit_id'] = $data['merge_commit_id'] ?? null;
        $this->container['merge_message_field'] = $data['merge_message_field'] ?? null;
        $this->container['merge_title_field'] = $data['merge_title_field'] ?? null;
        $this->container['delete_branch_after_merge'] = $data['delete_branch_after_merge'] ?? null;
        $this->container['force_merge'] = $data['force_merge'] ?? null;
        $this->container['head_commit_id'] = $data['head_commit_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['do'] === null) {
            $invalidProperties[] = "'do' can't be null";
        }
        $allowedValues = $this->getDoAllowableValues();
        if (!is_null($this->container['do']) && !in_array($this->container['do'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'do', must be one of '%s'",
                $this->container['do'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets do
     *
     * @return string
     */
    public function getDo()
    {
        return $this->container['do'];
    }

    /**
     * Sets do
     *
     * @param string $do do
     *
     * @return self
     */
    public function setDo($do)
    {
        $allowedValues = $this->getDoAllowableValues();
        if (!in_array($do, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'do', must be one of '%s'",
                    $do,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['do'] = $do;

        return $this;
    }

    /**
     * Gets merge_commit_id
     *
     * @return string|null
     */
    public function getMergeCommitId()
    {
        return $this->container['merge_commit_id'];
    }

    /**
     * Sets merge_commit_id
     *
     * @param string|null $merge_commit_id merge_commit_id
     *
     * @return self
     */
    public function setMergeCommitId($merge_commit_id)
    {
        $this->container['merge_commit_id'] = $merge_commit_id;

        return $this;
    }

    /**
     * Gets merge_message_field
     *
     * @return string|null
     */
    public function getMergeMessageField()
    {
        return $this->container['merge_message_field'];
    }

    /**
     * Sets merge_message_field
     *
     * @param string|null $merge_message_field merge_message_field
     *
     * @return self
     */
    public function setMergeMessageField($merge_message_field)
    {
        $this->container['merge_message_field'] = $merge_message_field;

        return $this;
    }

    /**
     * Gets merge_title_field
     *
     * @return string|null
     */
    public function getMergeTitleField()
    {
        return $this->container['merge_title_field'];
    }

    /**
     * Sets merge_title_field
     *
     * @param string|null $merge_title_field merge_title_field
     *
     * @return self
     */
    public function setMergeTitleField($merge_title_field)
    {
        $this->container['merge_title_field'] = $merge_title_field;

        return $this;
    }

    /**
     * Gets delete_branch_after_merge
     *
     * @return bool|null
     */
    public function getDeleteBranchAfterMerge()
    {
        return $this->container['delete_branch_after_merge'];
    }

    /**
     * Sets delete_branch_after_merge
     *
     * @param bool|null $delete_branch_after_merge delete_branch_after_merge
     *
     * @return self
     */
    public function setDeleteBranchAfterMerge($delete_branch_after_merge)
    {
        $this->container['delete_branch_after_merge'] = $delete_branch_after_merge;

        return $this;
    }

    /**
     * Gets force_merge
     *
     * @return bool|null
     */
    public function getForceMerge()
    {
        return $this->container['force_merge'];
    }

    /**
     * Sets force_merge
     *
     * @param bool|null $force_merge force_merge
     *
     * @return self
     */
    public function setForceMerge($force_merge)
    {
        $this->container['force_merge'] = $force_merge;

        return $this;
    }

    /**
     * Gets head_commit_id
     *
     * @return string|null
     */
    public function getHeadCommitId()
    {
        return $this->container['head_commit_id'];
    }

    /**
     * Sets head_commit_id
     *
     * @param string|null $head_commit_id head_commit_id
     *
     * @return self
     */
    public function setHeadCommitId($head_commit_id)
    {
        $this->container['head_commit_id'] = $head_commit_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


