<?php
/**
 * PullReview
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Gitea\Model;

use \ArrayAccess;
use \Efsa\Client\Gitea\ObjectSerializer;

/**
 * PullReview Class Doc Comment
 *
 * @category Class
 * @description PullReview represents a pull request review
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PullReview implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PullReview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'body' => 'string',
        'commentsCount' => 'int',
        'commitId' => 'string',
        'dismissed' => 'bool',
        'htmlUrl' => 'string',
        'id' => 'int',
        'official' => 'bool',
        'pullRequestUrl' => 'string',
        'stale' => 'bool',
        'state' => 'string',
        'submittedAt' => '\DateTime',
        'team' => '\Efsa\Client\Gitea\Model\Team',
        'user' => '\Efsa\Client\Gitea\Model\User'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'body' => null,
        'commentsCount' => 'int64',
        'commitId' => null,
        'dismissed' => null,
        'htmlUrl' => null,
        'id' => 'int64',
        'official' => null,
        'pullRequestUrl' => null,
        'stale' => null,
        'state' => null,
        'submittedAt' => 'date-time',
        'team' => null,
        'user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'body' => 'body',
        'commentsCount' => 'comments_count',
        'commitId' => 'commit_id',
        'dismissed' => 'dismissed',
        'htmlUrl' => 'html_url',
        'id' => 'id',
        'official' => 'official',
        'pullRequestUrl' => 'pull_request_url',
        'stale' => 'stale',
        'state' => 'state',
        'submittedAt' => 'submitted_at',
        'team' => 'team',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'body' => 'setBody',
        'commentsCount' => 'setCommentsCount',
        'commitId' => 'setCommitId',
        'dismissed' => 'setDismissed',
        'htmlUrl' => 'setHtmlUrl',
        'id' => 'setId',
        'official' => 'setOfficial',
        'pullRequestUrl' => 'setPullRequestUrl',
        'stale' => 'setStale',
        'state' => 'setState',
        'submittedAt' => 'setSubmittedAt',
        'team' => 'setTeam',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'body' => 'getBody',
        'commentsCount' => 'getCommentsCount',
        'commitId' => 'getCommitId',
        'dismissed' => 'getDismissed',
        'htmlUrl' => 'getHtmlUrl',
        'id' => 'getId',
        'official' => 'getOfficial',
        'pullRequestUrl' => 'getPullRequestUrl',
        'stale' => 'getStale',
        'state' => 'getState',
        'submittedAt' => 'getSubmittedAt',
        'team' => 'getTeam',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['body'] = $data['body'] ?? null;
        $this->container['commentsCount'] = $data['commentsCount'] ?? null;
        $this->container['commitId'] = $data['commitId'] ?? null;
        $this->container['dismissed'] = $data['dismissed'] ?? null;
        $this->container['htmlUrl'] = $data['htmlUrl'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['official'] = $data['official'] ?? null;
        $this->container['pullRequestUrl'] = $data['pullRequestUrl'] ?? null;
        $this->container['stale'] = $data['stale'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['submittedAt'] = $data['submittedAt'] ?? null;
        $this->container['team'] = $data['team'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets commentsCount
     *
     * @return int|null
     */
    public function getCommentsCount()
    {
        return $this->container['commentsCount'];
    }

    /**
     * Sets commentsCount
     *
     * @param int|null $commentsCount commentsCount
     *
     * @return self
     */
    public function setCommentsCount($commentsCount)
    {
        $this->container['commentsCount'] = $commentsCount;

        return $this;
    }

    /**
     * Gets commitId
     *
     * @return string|null
     */
    public function getCommitId()
    {
        return $this->container['commitId'];
    }

    /**
     * Sets commitId
     *
     * @param string|null $commitId commitId
     *
     * @return self
     */
    public function setCommitId($commitId)
    {
        $this->container['commitId'] = $commitId;

        return $this;
    }

    /**
     * Gets dismissed
     *
     * @return bool|null
     */
    public function getDismissed()
    {
        return $this->container['dismissed'];
    }

    /**
     * Sets dismissed
     *
     * @param bool|null $dismissed dismissed
     *
     * @return self
     */
    public function setDismissed($dismissed)
    {
        $this->container['dismissed'] = $dismissed;

        return $this;
    }

    /**
     * Gets htmlUrl
     *
     * @return string|null
     */
    public function getHtmlUrl()
    {
        return $this->container['htmlUrl'];
    }

    /**
     * Sets htmlUrl
     *
     * @param string|null $htmlUrl htmlUrl
     *
     * @return self
     */
    public function setHtmlUrl($htmlUrl)
    {
        $this->container['htmlUrl'] = $htmlUrl;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets official
     *
     * @return bool|null
     */
    public function getOfficial()
    {
        return $this->container['official'];
    }

    /**
     * Sets official
     *
     * @param bool|null $official official
     *
     * @return self
     */
    public function setOfficial($official)
    {
        $this->container['official'] = $official;

        return $this;
    }

    /**
     * Gets pullRequestUrl
     *
     * @return string|null
     */
    public function getPullRequestUrl()
    {
        return $this->container['pullRequestUrl'];
    }

    /**
     * Sets pullRequestUrl
     *
     * @param string|null $pullRequestUrl pullRequestUrl
     *
     * @return self
     */
    public function setPullRequestUrl($pullRequestUrl)
    {
        $this->container['pullRequestUrl'] = $pullRequestUrl;

        return $this;
    }

    /**
     * Gets stale
     *
     * @return bool|null
     */
    public function getStale()
    {
        return $this->container['stale'];
    }

    /**
     * Sets stale
     *
     * @param bool|null $stale stale
     *
     * @return self
     */
    public function setStale($stale)
    {
        $this->container['stale'] = $stale;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state ReviewStateType review state type
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets submittedAt
     *
     * @return \DateTime|null
     */
    public function getSubmittedAt()
    {
        return $this->container['submittedAt'];
    }

    /**
     * Sets submittedAt
     *
     * @param \DateTime|null $submittedAt submittedAt
     *
     * @return self
     */
    public function setSubmittedAt($submittedAt)
    {
        $this->container['submittedAt'] = $submittedAt;

        return $this;
    }

    /**
     * Gets team
     *
     * @return \Efsa\Client\Gitea\Model\Team|null
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param \Efsa\Client\Gitea\Model\Team|null $team team
     *
     * @return self
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Efsa\Client\Gitea\Model\User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Efsa\Client\Gitea\Model\User|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


