<?php
/**
 * GPGKey
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Gitea\Model;

use \ArrayAccess;
use \Efsa\Client\Gitea\ObjectSerializer;

/**
 * GPGKey Class Doc Comment
 *
 * @category Class
 * @description GPGKey a user GPG key to sign commit and tag in repository
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GPGKey implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GPGKey';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canCertify' => 'bool',
        'canEncryptComms' => 'bool',
        'canEncryptStorage' => 'bool',
        'canSign' => 'bool',
        'createdAt' => '\DateTime',
        'emails' => '\Efsa\Client\Gitea\Model\GPGKeyEmail[]',
        'expiresAt' => '\DateTime',
        'id' => 'int',
        'keyId' => 'string',
        'primaryKeyId' => 'string',
        'publicKey' => 'string',
        'subkeys' => '\Efsa\Client\Gitea\Model\GPGKey[]',
        'verified' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'canCertify' => null,
        'canEncryptComms' => null,
        'canEncryptStorage' => null,
        'canSign' => null,
        'createdAt' => 'date-time',
        'emails' => null,
        'expiresAt' => 'date-time',
        'id' => 'int64',
        'keyId' => null,
        'primaryKeyId' => null,
        'publicKey' => null,
        'subkeys' => null,
        'verified' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canCertify' => 'can_certify',
        'canEncryptComms' => 'can_encrypt_comms',
        'canEncryptStorage' => 'can_encrypt_storage',
        'canSign' => 'can_sign',
        'createdAt' => 'created_at',
        'emails' => 'emails',
        'expiresAt' => 'expires_at',
        'id' => 'id',
        'keyId' => 'key_id',
        'primaryKeyId' => 'primary_key_id',
        'publicKey' => 'public_key',
        'subkeys' => 'subkeys',
        'verified' => 'verified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canCertify' => 'setCanCertify',
        'canEncryptComms' => 'setCanEncryptComms',
        'canEncryptStorage' => 'setCanEncryptStorage',
        'canSign' => 'setCanSign',
        'createdAt' => 'setCreatedAt',
        'emails' => 'setEmails',
        'expiresAt' => 'setExpiresAt',
        'id' => 'setId',
        'keyId' => 'setKeyId',
        'primaryKeyId' => 'setPrimaryKeyId',
        'publicKey' => 'setPublicKey',
        'subkeys' => 'setSubkeys',
        'verified' => 'setVerified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canCertify' => 'getCanCertify',
        'canEncryptComms' => 'getCanEncryptComms',
        'canEncryptStorage' => 'getCanEncryptStorage',
        'canSign' => 'getCanSign',
        'createdAt' => 'getCreatedAt',
        'emails' => 'getEmails',
        'expiresAt' => 'getExpiresAt',
        'id' => 'getId',
        'keyId' => 'getKeyId',
        'primaryKeyId' => 'getPrimaryKeyId',
        'publicKey' => 'getPublicKey',
        'subkeys' => 'getSubkeys',
        'verified' => 'getVerified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['canCertify'] = $data['canCertify'] ?? null;
        $this->container['canEncryptComms'] = $data['canEncryptComms'] ?? null;
        $this->container['canEncryptStorage'] = $data['canEncryptStorage'] ?? null;
        $this->container['canSign'] = $data['canSign'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['emails'] = $data['emails'] ?? null;
        $this->container['expiresAt'] = $data['expiresAt'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['keyId'] = $data['keyId'] ?? null;
        $this->container['primaryKeyId'] = $data['primaryKeyId'] ?? null;
        $this->container['publicKey'] = $data['publicKey'] ?? null;
        $this->container['subkeys'] = $data['subkeys'] ?? null;
        $this->container['verified'] = $data['verified'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canCertify
     *
     * @return bool|null
     */
    public function getCanCertify()
    {
        return $this->container['canCertify'];
    }

    /**
     * Sets canCertify
     *
     * @param bool|null $canCertify canCertify
     *
     * @return self
     */
    public function setCanCertify($canCertify)
    {
        $this->container['canCertify'] = $canCertify;

        return $this;
    }

    /**
     * Gets canEncryptComms
     *
     * @return bool|null
     */
    public function getCanEncryptComms()
    {
        return $this->container['canEncryptComms'];
    }

    /**
     * Sets canEncryptComms
     *
     * @param bool|null $canEncryptComms canEncryptComms
     *
     * @return self
     */
    public function setCanEncryptComms($canEncryptComms)
    {
        $this->container['canEncryptComms'] = $canEncryptComms;

        return $this;
    }

    /**
     * Gets canEncryptStorage
     *
     * @return bool|null
     */
    public function getCanEncryptStorage()
    {
        return $this->container['canEncryptStorage'];
    }

    /**
     * Sets canEncryptStorage
     *
     * @param bool|null $canEncryptStorage canEncryptStorage
     *
     * @return self
     */
    public function setCanEncryptStorage($canEncryptStorage)
    {
        $this->container['canEncryptStorage'] = $canEncryptStorage;

        return $this;
    }

    /**
     * Gets canSign
     *
     * @return bool|null
     */
    public function getCanSign()
    {
        return $this->container['canSign'];
    }

    /**
     * Sets canSign
     *
     * @param bool|null $canSign canSign
     *
     * @return self
     */
    public function setCanSign($canSign)
    {
        $this->container['canSign'] = $canSign;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \Efsa\Client\Gitea\Model\GPGKeyEmail[]|null
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \Efsa\Client\Gitea\Model\GPGKeyEmail[]|null $emails emails
     *
     * @return self
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets expiresAt
     *
     * @return \DateTime|null
     */
    public function getExpiresAt()
    {
        return $this->container['expiresAt'];
    }

    /**
     * Sets expiresAt
     *
     * @param \DateTime|null $expiresAt expiresAt
     *
     * @return self
     */
    public function setExpiresAt($expiresAt)
    {
        $this->container['expiresAt'] = $expiresAt;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets keyId
     *
     * @return string|null
     */
    public function getKeyId()
    {
        return $this->container['keyId'];
    }

    /**
     * Sets keyId
     *
     * @param string|null $keyId keyId
     *
     * @return self
     */
    public function setKeyId($keyId)
    {
        $this->container['keyId'] = $keyId;

        return $this;
    }

    /**
     * Gets primaryKeyId
     *
     * @return string|null
     */
    public function getPrimaryKeyId()
    {
        return $this->container['primaryKeyId'];
    }

    /**
     * Sets primaryKeyId
     *
     * @param string|null $primaryKeyId primaryKeyId
     *
     * @return self
     */
    public function setPrimaryKeyId($primaryKeyId)
    {
        $this->container['primaryKeyId'] = $primaryKeyId;

        return $this;
    }

    /**
     * Gets publicKey
     *
     * @return string|null
     */
    public function getPublicKey()
    {
        return $this->container['publicKey'];
    }

    /**
     * Sets publicKey
     *
     * @param string|null $publicKey publicKey
     *
     * @return self
     */
    public function setPublicKey($publicKey)
    {
        $this->container['publicKey'] = $publicKey;

        return $this;
    }

    /**
     * Gets subkeys
     *
     * @return \Efsa\Client\Gitea\Model\GPGKey[]|null
     */
    public function getSubkeys()
    {
        return $this->container['subkeys'];
    }

    /**
     * Sets subkeys
     *
     * @param \Efsa\Client\Gitea\Model\GPGKey[]|null $subkeys subkeys
     *
     * @return self
     */
    public function setSubkeys($subkeys)
    {
        $this->container['subkeys'] = $subkeys;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool|null
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool|null $verified verified
     *
     * @return self
     */
    public function setVerified($verified)
    {
        $this->container['verified'] = $verified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


