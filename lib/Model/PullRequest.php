<?php
/**
 * PullRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.17.0+dev-334-gf36701c70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Efsa\Client\Gitea\Model;

use \ArrayAccess;
use \Efsa\Client\Gitea\ObjectSerializer;

/**
 * PullRequest Class Doc Comment
 *
 * @category Class
 * @description PullRequest represents a pull request
 * @package  Efsa\Client\Gitea
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PullRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PullRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assignee' => '\Efsa\Client\Gitea\Model\User',
        'assignees' => '\Efsa\Client\Gitea\Model\User[]',
        'base' => '\Efsa\Client\Gitea\Model\PRBranchInfo',
        'body' => 'string',
        'closedAt' => '\DateTime',
        'comments' => 'int',
        'createdAt' => '\DateTime',
        'diffUrl' => 'string',
        'dueDate' => '\DateTime',
        'head' => '\Efsa\Client\Gitea\Model\PRBranchInfo',
        'htmlUrl' => 'string',
        'id' => 'int',
        'isLocked' => 'bool',
        'labels' => '\Efsa\Client\Gitea\Model\Label[]',
        'mergeBase' => 'string',
        'mergeCommitSha' => 'string',
        'mergeable' => 'bool',
        'merged' => 'bool',
        'mergedAt' => '\DateTime',
        'mergedBy' => '\Efsa\Client\Gitea\Model\User',
        'milestone' => '\Efsa\Client\Gitea\Model\Milestone',
        'number' => 'int',
        'patchUrl' => 'string',
        'state' => 'string',
        'title' => 'string',
        'updatedAt' => '\DateTime',
        'url' => 'string',
        'user' => '\Efsa\Client\Gitea\Model\User'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assignee' => null,
        'assignees' => null,
        'base' => null,
        'body' => null,
        'closedAt' => 'date-time',
        'comments' => 'int64',
        'createdAt' => 'date-time',
        'diffUrl' => null,
        'dueDate' => 'date-time',
        'head' => null,
        'htmlUrl' => null,
        'id' => 'int64',
        'isLocked' => null,
        'labels' => null,
        'mergeBase' => null,
        'mergeCommitSha' => null,
        'mergeable' => null,
        'merged' => null,
        'mergedAt' => 'date-time',
        'mergedBy' => null,
        'milestone' => null,
        'number' => 'int64',
        'patchUrl' => null,
        'state' => null,
        'title' => null,
        'updatedAt' => 'date-time',
        'url' => null,
        'user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assignee' => 'assignee',
        'assignees' => 'assignees',
        'base' => 'base',
        'body' => 'body',
        'closedAt' => 'closed_at',
        'comments' => 'comments',
        'createdAt' => 'created_at',
        'diffUrl' => 'diff_url',
        'dueDate' => 'due_date',
        'head' => 'head',
        'htmlUrl' => 'html_url',
        'id' => 'id',
        'isLocked' => 'is_locked',
        'labels' => 'labels',
        'mergeBase' => 'merge_base',
        'mergeCommitSha' => 'merge_commit_sha',
        'mergeable' => 'mergeable',
        'merged' => 'merged',
        'mergedAt' => 'merged_at',
        'mergedBy' => 'merged_by',
        'milestone' => 'milestone',
        'number' => 'number',
        'patchUrl' => 'patch_url',
        'state' => 'state',
        'title' => 'title',
        'updatedAt' => 'updated_at',
        'url' => 'url',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assignee' => 'setAssignee',
        'assignees' => 'setAssignees',
        'base' => 'setBase',
        'body' => 'setBody',
        'closedAt' => 'setClosedAt',
        'comments' => 'setComments',
        'createdAt' => 'setCreatedAt',
        'diffUrl' => 'setDiffUrl',
        'dueDate' => 'setDueDate',
        'head' => 'setHead',
        'htmlUrl' => 'setHtmlUrl',
        'id' => 'setId',
        'isLocked' => 'setIsLocked',
        'labels' => 'setLabels',
        'mergeBase' => 'setMergeBase',
        'mergeCommitSha' => 'setMergeCommitSha',
        'mergeable' => 'setMergeable',
        'merged' => 'setMerged',
        'mergedAt' => 'setMergedAt',
        'mergedBy' => 'setMergedBy',
        'milestone' => 'setMilestone',
        'number' => 'setNumber',
        'patchUrl' => 'setPatchUrl',
        'state' => 'setState',
        'title' => 'setTitle',
        'updatedAt' => 'setUpdatedAt',
        'url' => 'setUrl',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assignee' => 'getAssignee',
        'assignees' => 'getAssignees',
        'base' => 'getBase',
        'body' => 'getBody',
        'closedAt' => 'getClosedAt',
        'comments' => 'getComments',
        'createdAt' => 'getCreatedAt',
        'diffUrl' => 'getDiffUrl',
        'dueDate' => 'getDueDate',
        'head' => 'getHead',
        'htmlUrl' => 'getHtmlUrl',
        'id' => 'getId',
        'isLocked' => 'getIsLocked',
        'labels' => 'getLabels',
        'mergeBase' => 'getMergeBase',
        'mergeCommitSha' => 'getMergeCommitSha',
        'mergeable' => 'getMergeable',
        'merged' => 'getMerged',
        'mergedAt' => 'getMergedAt',
        'mergedBy' => 'getMergedBy',
        'milestone' => 'getMilestone',
        'number' => 'getNumber',
        'patchUrl' => 'getPatchUrl',
        'state' => 'getState',
        'title' => 'getTitle',
        'updatedAt' => 'getUpdatedAt',
        'url' => 'getUrl',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assignee'] = $data['assignee'] ?? null;
        $this->container['assignees'] = $data['assignees'] ?? null;
        $this->container['base'] = $data['base'] ?? null;
        $this->container['body'] = $data['body'] ?? null;
        $this->container['closedAt'] = $data['closedAt'] ?? null;
        $this->container['comments'] = $data['comments'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['diffUrl'] = $data['diffUrl'] ?? null;
        $this->container['dueDate'] = $data['dueDate'] ?? null;
        $this->container['head'] = $data['head'] ?? null;
        $this->container['htmlUrl'] = $data['htmlUrl'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['isLocked'] = $data['isLocked'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['mergeBase'] = $data['mergeBase'] ?? null;
        $this->container['mergeCommitSha'] = $data['mergeCommitSha'] ?? null;
        $this->container['mergeable'] = $data['mergeable'] ?? null;
        $this->container['merged'] = $data['merged'] ?? null;
        $this->container['mergedAt'] = $data['mergedAt'] ?? null;
        $this->container['mergedBy'] = $data['mergedBy'] ?? null;
        $this->container['milestone'] = $data['milestone'] ?? null;
        $this->container['number'] = $data['number'] ?? null;
        $this->container['patchUrl'] = $data['patchUrl'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['updatedAt'] = $data['updatedAt'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assignee
     *
     * @return \Efsa\Client\Gitea\Model\User|null
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param \Efsa\Client\Gitea\Model\User|null $assignee assignee
     *
     * @return self
     */
    public function setAssignee($assignee)
    {
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets assignees
     *
     * @return \Efsa\Client\Gitea\Model\User[]|null
     */
    public function getAssignees()
    {
        return $this->container['assignees'];
    }

    /**
     * Sets assignees
     *
     * @param \Efsa\Client\Gitea\Model\User[]|null $assignees assignees
     *
     * @return self
     */
    public function setAssignees($assignees)
    {
        $this->container['assignees'] = $assignees;

        return $this;
    }

    /**
     * Gets base
     *
     * @return \Efsa\Client\Gitea\Model\PRBranchInfo|null
     */
    public function getBase()
    {
        return $this->container['base'];
    }

    /**
     * Sets base
     *
     * @param \Efsa\Client\Gitea\Model\PRBranchInfo|null $base base
     *
     * @return self
     */
    public function setBase($base)
    {
        $this->container['base'] = $base;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets closedAt
     *
     * @return \DateTime|null
     */
    public function getClosedAt()
    {
        return $this->container['closedAt'];
    }

    /**
     * Sets closedAt
     *
     * @param \DateTime|null $closedAt closedAt
     *
     * @return self
     */
    public function setClosedAt($closedAt)
    {
        $this->container['closedAt'] = $closedAt;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return int|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param int|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets diffUrl
     *
     * @return string|null
     */
    public function getDiffUrl()
    {
        return $this->container['diffUrl'];
    }

    /**
     * Sets diffUrl
     *
     * @param string|null $diffUrl diffUrl
     *
     * @return self
     */
    public function setDiffUrl($diffUrl)
    {
        $this->container['diffUrl'] = $diffUrl;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param \DateTime|null $dueDate dueDate
     *
     * @return self
     */
    public function setDueDate($dueDate)
    {
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets head
     *
     * @return \Efsa\Client\Gitea\Model\PRBranchInfo|null
     */
    public function getHead()
    {
        return $this->container['head'];
    }

    /**
     * Sets head
     *
     * @param \Efsa\Client\Gitea\Model\PRBranchInfo|null $head head
     *
     * @return self
     */
    public function setHead($head)
    {
        $this->container['head'] = $head;

        return $this;
    }

    /**
     * Gets htmlUrl
     *
     * @return string|null
     */
    public function getHtmlUrl()
    {
        return $this->container['htmlUrl'];
    }

    /**
     * Sets htmlUrl
     *
     * @param string|null $htmlUrl htmlUrl
     *
     * @return self
     */
    public function setHtmlUrl($htmlUrl)
    {
        $this->container['htmlUrl'] = $htmlUrl;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isLocked
     *
     * @return bool|null
     */
    public function getIsLocked()
    {
        return $this->container['isLocked'];
    }

    /**
     * Sets isLocked
     *
     * @param bool|null $isLocked isLocked
     *
     * @return self
     */
    public function setIsLocked($isLocked)
    {
        $this->container['isLocked'] = $isLocked;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Efsa\Client\Gitea\Model\Label[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Efsa\Client\Gitea\Model\Label[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets mergeBase
     *
     * @return string|null
     */
    public function getMergeBase()
    {
        return $this->container['mergeBase'];
    }

    /**
     * Sets mergeBase
     *
     * @param string|null $mergeBase mergeBase
     *
     * @return self
     */
    public function setMergeBase($mergeBase)
    {
        $this->container['mergeBase'] = $mergeBase;

        return $this;
    }

    /**
     * Gets mergeCommitSha
     *
     * @return string|null
     */
    public function getMergeCommitSha()
    {
        return $this->container['mergeCommitSha'];
    }

    /**
     * Sets mergeCommitSha
     *
     * @param string|null $mergeCommitSha mergeCommitSha
     *
     * @return self
     */
    public function setMergeCommitSha($mergeCommitSha)
    {
        $this->container['mergeCommitSha'] = $mergeCommitSha;

        return $this;
    }

    /**
     * Gets mergeable
     *
     * @return bool|null
     */
    public function getMergeable()
    {
        return $this->container['mergeable'];
    }

    /**
     * Sets mergeable
     *
     * @param bool|null $mergeable mergeable
     *
     * @return self
     */
    public function setMergeable($mergeable)
    {
        $this->container['mergeable'] = $mergeable;

        return $this;
    }

    /**
     * Gets merged
     *
     * @return bool|null
     */
    public function getMerged()
    {
        return $this->container['merged'];
    }

    /**
     * Sets merged
     *
     * @param bool|null $merged merged
     *
     * @return self
     */
    public function setMerged($merged)
    {
        $this->container['merged'] = $merged;

        return $this;
    }

    /**
     * Gets mergedAt
     *
     * @return \DateTime|null
     */
    public function getMergedAt()
    {
        return $this->container['mergedAt'];
    }

    /**
     * Sets mergedAt
     *
     * @param \DateTime|null $mergedAt mergedAt
     *
     * @return self
     */
    public function setMergedAt($mergedAt)
    {
        $this->container['mergedAt'] = $mergedAt;

        return $this;
    }

    /**
     * Gets mergedBy
     *
     * @return \Efsa\Client\Gitea\Model\User|null
     */
    public function getMergedBy()
    {
        return $this->container['mergedBy'];
    }

    /**
     * Sets mergedBy
     *
     * @param \Efsa\Client\Gitea\Model\User|null $mergedBy mergedBy
     *
     * @return self
     */
    public function setMergedBy($mergedBy)
    {
        $this->container['mergedBy'] = $mergedBy;

        return $this;
    }

    /**
     * Gets milestone
     *
     * @return \Efsa\Client\Gitea\Model\Milestone|null
     */
    public function getMilestone()
    {
        return $this->container['milestone'];
    }

    /**
     * Sets milestone
     *
     * @param \Efsa\Client\Gitea\Model\Milestone|null $milestone milestone
     *
     * @return self
     */
    public function setMilestone($milestone)
    {
        $this->container['milestone'] = $milestone;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets patchUrl
     *
     * @return string|null
     */
    public function getPatchUrl()
    {
        return $this->container['patchUrl'];
    }

    /**
     * Sets patchUrl
     *
     * @param string|null $patchUrl patchUrl
     *
     * @return self
     */
    public function setPatchUrl($patchUrl)
    {
        $this->container['patchUrl'] = $patchUrl;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state StateType issue state type
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Efsa\Client\Gitea\Model\User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Efsa\Client\Gitea\Model\User|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


